name: Deploy Package
on:
  push:
    branches: [main]
# env:
#   BEFORE_SHA: ${{ github.event.before }}
#   cache-name: npm
# jobs:

#   test:

#     name: Run Lint & Tests
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout source
#         uses: actions/checkout@v2

#       - name: Setup Node.js
#         uses: actions/setup-node@v1
#         with:
#           node-version: 13.x

#       - name: Install Node.js dependencies
#         run: npm ci

#       - name: Run lint
#         run: npm run lint

#       - name: Send notification to Discord
#         uses: sarisia/actions-status-discord@v1
#         if: always()
#         with:
#           webhook: ${{ secrets.DISCORD_WEBHOOK }}
#           title: 'Generate Release: Run Tests'

#   build-desktop:
#     name: Build Desktop App
#     needs: test
#     runs-on: ubuntu-latest
#     steps:

#       - name: Checkout the repository
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0

#       - name: Use Node.js 16.x
#         uses: actions/setup-node@v1
#         with:
#           node-version: 16.x

#       - name: Fetch repository
#         run: git fetch origin main

#       - name: Cache node modules
#         uses: actions/cache@v2
#         env:
#           cache-name: cache-node-modules
#         with:
#           # npm cache files are stored in `~/.npm` on Linux/macOS
#           path: ~/.npm
#           key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-build-${{ env.cache-name }}-
#             ${{ runner.os }}-build-
#             ${{ runner.os }}-

#       - name: Install dependencies
#         run: npm install

#       - name: Build portal
#         run: npx nx run portal:electron-build

#       - name: Upload binaries
#         uses: actions/upload-artifact@v2
#         with:
#           name: portal-binaries
#           path: dist/apps/portal

#       - name: Send notification to Discord
#         uses: sarisia/actions-status-discord@v1
#         if: always()
#         with:
#           webhook: ${{ secrets.DISCORD_WEBHOOK }}
#           title: 'Generate Release: Build Application for Desktop'

#   publish:
#     name: Create Release with generated artifacts
#     needs: build-desktop
#     runs-on: ubuntu-latest

#     steps:
#       - name: Get current date
#         id: date
#         run: echo "::set-output name=date::$(date +'%Y%m%d.%H%M')"

#       - name: Download Artifacts
#         uses: actions/download-artifact@v2
#         with:
#           path: artifacts

#       - name: Create Github Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ steps.date.outputs.date }}
#           release_name: ${{ steps.date.outputs.date }}
#           draft: false
#           prerelease: false

#       - name: Upload Desktop binaries to Github Release
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#           asset_path: artifacts/portal-binaries
#           asset_name: portal-binaries
#           asset_content_type: application/octet-stream

#       - name: Send notification to Discord
#         uses: sarisia/actions-status-discord@v1
#         if: always()
#         with:
#           webhook: ${{ secrets.DISCORD_WEBHOOK }}
#           title: 'Generate Release: Publish Release'



