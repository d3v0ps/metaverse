var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/ACL.html",[0,0.747,1,1.081]],["body/injectables/ACL.html",[0,0.946,1,1.369,2,1.439,3,0.992,4,0.827,5,0.827,6,1.771,7,0.561,8,2.444,9,1.833,10,1.773,11,2.571,12,3.597,13,1.369,14,2.444,15,2.444,16,3.141,17,3.141,18,1.985,19,1.266,20,1.773,21,2.276,22,1.567,23,0.073,24,1.567,25,2.127,26,1.567,27,2.571,28,3.141,29,4.207,30,2.276,31,2.276,32,3.141,33,2.276,34,1.771,35,2.276,36,1.19,37,1.19,38,1.985,39,2.276,40,1.69,41,0.992,42,1.369,43,2.276,44,2.276,45,2.444,46,2.444,47,1.771,48,2.799,49,1.985,50,2.273,51,1.19,52,0.992,53,0.992,54,0.992,55,0.561,56,3.878,57,2.276,58,1.771,59,2.799,60,1.878,61,2.799,62,1.771,63,0.775,64,3.141,65,2.276,66,3.141,67,1.439,68,1.369,69,1.439,70,1.439,71,1.771,72,0.992,73,1.439,74,2.276,75,1.439,76,1.439,77,2.276,78,2.276,79,1.771,80,0.046,81,0.046]],["title/injectables/EntityManager.html",[0,0.747,82,1.081]],["body/injectables/EntityManager.html",[0,0.629,1,1.568,2,0.831,3,0.573,4,0.478,5,0.478,7,0.324,8,1.625,9,1.855,10,1.627,11,1.869,13,0.91,15,2.021,18,1.869,19,1.232,20,1.676,22,1.568,23,0.073,24,1.784,25,0.688,26,1.496,27,2.543,34,1.024,36,0.688,37,0.688,38,1.32,40,1.784,41,0.573,48,2.021,49,1.32,50,1.642,51,0.688,52,0.573,53,0.573,54,1.132,55,0.324,59,1.625,60,1.834,62,1.024,63,0.949,67,1.869,68,1.905,70,0.831,72,1.753,75,0.831,76,1.32,80,0.031,81,0.031,82,0.91,83,2.491,84,0.831,85,2.597,86,2.14,87,2.597,88,2.088,89,2.597,90,2.597,91,1.869,92,2.088,93,1.092,94,1.315,95,2.958,96,2.597,97,2.088,98,1.315,99,3.847,100,1.315,101,2.958,102,2.088,103,1.315,104,1.315,105,3.6,106,1.315,107,1.315,108,1.315,109,1.024,110,1.315,111,1.315,112,2.597,113,1.315,114,1.092,115,2.088,116,1.315,117,2.088,118,1.315,119,0.831,120,0.688,121,1.315,122,1.024,123,1.024,124,1.024,125,1.315,126,2.088,127,1.625,128,2.597,129,1.315,130,1.315,131,1.315,132,1.315,133,1.315,134,1.315,135,1.315,136,1.315,137,1.315,138,1.315,139,1.315,140,1.315,141,1.315,142,2.301,143,1.315,144,1.625,145,2.088,146,1.315,147,2.088,148,1.024,149,1.358,150,1.315,151,1.315,152,1.315,153,1.315,154,1.315,155,0.831,156,1.024,157,0.831,158,1.024,159,2.021,160,1.315,161,1.315,162,1.315,163,1.625,164,2.301,165,1.315,166,1.315,167,2.088,168,1.315,169,2.088,170,1.315,171,1.315,172,1.315,173,1.32,174,2.597,175,1.315,176,1.315,177,1.315,178,1.315,179,2.088,180,1.315,181,1.315,182,1.024,183,1.315,184,1.315,185,1.315,186,1.315,187,1.315,188,1.315,189,2.088,190,1.024,191,1.315,192,1.315,193,1.315,194,1.315,195,1.315,196,1.024,197,1.315,198,1.315,199,3.434,200,2.088,201,2.088,202,2.597,203,2.597,204,1.315,205,1.024,206,1.315,207,1.315,208,1.315,209,1.315,210,1.315,211,2.088,212,1.315,213,1.315,214,2.088,215,1.024,216,1.315,217,1.315,218,1.315,219,2.088,220,1.315,221,1.315,222,1.315,223,1.315,224,1.315,225,1.315,226,1.315,227,1.315]],["title/guards/IsDatabaseCreatedGuard.html",[228,1.569,229,1.569]],["body/guards/IsDatabaseCreatedGuard.html",[0,1.085,3,1.218,4,1.015,5,1.015,7,0.69,9,1.737,10,1.218,13,1.57,19,0.842,20,1.57,22,1.218,23,0.072,24,1.218,26,1.218,40,1.737,41,1.218,52,1.57,53,1.57,54,1.57,55,0.69,60,1.218,63,0.69,68,1.737,72,1.57,80,0.053,81,0.053,82,1.944,86,2.085,91,2.52,93,1.884,114,1.884,119,1.767,120,1.884,229,2.277,230,1.767,231,2.085,232,2.085,233,1.462,234,3.472,235,2.176,236,3.532,237,3.102,238,2.176,239,2.176,240,1.767,241,2.176,242,1.767,243,2.277,244,1.218,245,2.176,246,2.176,247,2.796,248,2.176,249,2.176]],["title/guards/IsNotDatabaseCreatedGuard.html",[228,1.569,250,1.569]],["body/guards/IsNotDatabaseCreatedGuard.html",[0,1.085,3,1.218,4,1.015,5,1.015,7,0.69,9,1.737,10,1.218,13,1.57,19,0.842,20,1.57,22,1.218,23,0.072,24,1.218,26,1.218,40,1.737,41,1.218,52,1.57,53,1.57,54,1.57,55,0.69,60,1.218,63,0.69,68,1.737,72,1.57,80,0.053,81,0.053,82,1.944,86,2.085,91,2.52,93,1.884,114,1.884,119,1.767,120,1.884,230,1.767,231,2.085,232,2.085,233,1.462,234,3.472,235,2.176,236,3.532,237,3.102,238,2.176,239,2.176,240,1.767,241,2.176,242,1.767,244,1.218,246,2.176,248,2.176,249,2.176,250,2.277,251,2.277,252,2.796]],["title/classes/Repository.html",[55,0.612,149,1.298]],["body/classes/Repository.html",[1,1.489,3,0.454,4,0.379,5,0.379,7,0.257,9,1.343,10,1.756,11,1.4,13,0.754,14,1.346,19,1.297,20,1.756,22,1.756,23,0.073,24,1.756,25,0.545,26,1.73,27,2.826,36,0.545,37,0.545,38,1.093,40,1.124,42,0.454,45,0.811,46,2.006,47,0.811,49,0.659,50,2.241,51,0.545,54,1.124,55,0.257,60,1.963,61,2.225,63,0.843,67,1.63,68,1.922,69,0.659,70,1.4,71,0.811,72,0.454,73,2.826,75,1.807,76,2.58,79,2.659,80,0.025,81,0.025,93,0.904,109,2.399,114,1.159,127,2.006,142,1.724,144,3.04,149,0.904,159,1.724,163,2.006,164,1.346,173,0.659,182,0.811,196,0.811,205,2.225,215,2.225,253,1.043,254,0.659,255,1.724,256,3.417,257,1.729,258,1.729,259,1.729,260,2.216,261,1.729,262,2.216,263,2.216,264,2.216,265,1.729,266,1.729,267,2.844,268,1.043,269,1.043,270,1.043,271,1.043,272,3.266,273,1.043,274,1.043,275,1.729,276,1.043,277,4.081,278,1.729,279,3.417,280,1.043,281,1.729,282,1.043,283,1.043,284,1.043,285,1.729,286,1.043,287,1.043,288,1.043,289,1.043,290,2.983,291,2.578,292,1.043,293,1.043,294,1.043,295,1.729,296,1.043,297,1.729,298,1.043,299,1.043,300,1.043,301,1.729,302,1.043,303,1.729,304,1.043,305,1.346,306,1.043,307,3.083,308,1.043,309,2.216,310,3.266,311,1.043,312,2.578,313,3.083,314,1.043,315,1.043,316,2.859,317,2.578,318,1.043,319,1.043,320,1.043,321,0.811,322,1.043,323,1.043,324,1.043,325,2.859,326,3.266,327,2.541,328,1.043,329,1.043,330,2.578,331,1.043,332,1.043,333,2.216,334,2.216,335,2.216,336,1.043,337,1.729,338,1.729,339,1.043,340,1.043,341,1.043,342,1.729,343,1.043,344,1.729,345,1.043,346,0.811,347,0.811,348,0.811,349,1.043]],["title/contributing.html",[350,1.328,351,1.328,352,1.634]],["body/contributing.html",[23,0.05,42,1.271,58,2.27,63,0.505,80,0.03,81,0.03,86,0.671,190,0.999,242,0.812,255,1.989,327,0.999,346,1.594,347,0.999,352,1.989,353,2.27,354,2.27,355,2.917,356,1.284,357,1.284,358,2.049,359,3.188,360,1.284,361,2.049,362,1.284,363,1.284,364,3.188,365,1.594,366,2.049,367,1.284,368,2.049,369,3.188,370,2.049,371,4.234,372,1.284,373,2.917,374,3.703,375,3.398,376,2.917,377,2.556,378,2.917,379,2.917,380,1.284,381,2.556,382,1.284,383,1.284,384,2.049,385,1.284,386,2.481,387,1.284,388,1.284,389,1.989,390,1.284,391,1.284,392,1.284,393,1.284,394,1.284,395,1.284,396,2.049,397,1.284,398,1.284,399,1.284,400,1.284,401,1.284,402,1.284,403,1.284,404,2.049,405,1.284,406,1.284,407,1.284,408,1.284,409,2.049,410,1.284,411,2.774,412,2.556,413,3.398,414,3.565,415,2.049,416,3.398,417,2.049,418,2.049,419,2.049,420,2.015,421,2.049,422,2.049,423,2.049,424,2.049,425,3.398,426,1.284,427,2.049,428,1.284,429,2.049,430,1.284,431,3.565,432,1.284,433,3.188,434,3.398,435,1.284,436,1.284,437,1.284,438,2.917,439,2.917,440,2.917,441,2.556,442,1.284,443,4.443,444,2.049,445,2.556,446,2.049,447,1.284,448,1.284,449,2.049,450,1.284,451,1.284,452,1.284,453,1.989,454,1.594,455,3.188,456,2.049,457,2.049,458,2.049,459,1.284,460,2.049,461,2.049,462,1.284,463,1.284,464,1.284,465,2.049,466,2.049,467,1.284,468,1.284,469,1.284,470,2.917,471,1.284,472,0.999,473,1.284,474,1.284,475,1.284,476,2.556,477,1.284,478,0.999,479,1.594,480,1.284,481,0.812,482,2.556,483,4.13,484,2.917,485,1.284,486,1.284,487,1.284,488,1.284,489,1.284,490,2.049,491,1.284,492,2.917,493,1.284,494,1.284,495,2.049,496,2.049,497,2.556,498,1.284,499,1.284,500,3.398,501,1.284,502,2.049,503,1.284,504,1.284,505,2.556,506,2.049,507,2.917,508,1.284,509,1.284,510,1.284,511,1.284,512,1.284,513,2.049,514,1.284,515,1.284,516,2.049,517,3.188,518,1.284,519,1.284,520,2.049,521,1.284,522,1.284,523,2.049,524,1.594,525,2.049,526,1.284,527,1.284,528,2.556,529,1.284,530,1.284,531,1.284,532,1.284,533,2.049,534,2.049,535,2.049,536,1.284,537,1.284,538,1.284,539,1.284,540,1.284,541,1.284,542,0.999,543,2.049,544,1.284,545,1.284,546,1.284,547,3.188,548,1.284,549,2.049,550,1.284,551,1.284,552,2.556,553,1.284,554,1.284,555,2.556,556,1.284,557,1.284,558,1.284,559,1.989,560,1.284,561,1.284,562,0.999,563,1.284,564,2.917,565,1.594,566,1.284,567,2.049,568,2.556,569,1.284,570,1.284,571,2.049,572,2.049,573,1.284,574,1.284,575,1.284,576,0.999,577,1.284,578,1.284,579,1.284,580,1.284,581,1.284,582,1.284,583,1.284,584,1.284,585,1.284,586,2.049,587,1.284,588,1.284,589,1.284,590,1.284,591,1.284,592,1.284,593,1.284,594,1.284,595,2.556,596,2.049,597,1.284,598,1.284,599,1.284,600,1.284,601,1.284,602,1.284,603,1.284,604,1.284,605,1.284,606,1.284,607,1.284,608,1.284,609,1.284,610,3.565,611,3.188,612,1.284,613,2.049,614,1.284,615,1.284,616,2.049,617,1.284,618,1.284,619,2.049,620,1.284,621,1.284,622,1.284,623,1.284,624,2.049,625,2.049,626,1.284,627,1.284,628,1.284,629,1.284,630,1.284,631,1.284,632,1.284,633,1.284,634,1.284,635,1.284,636,1.284,637,1.284,638,1.284,639,1.284,640,2.049,641,1.284,642,1.284,643,1.284,644,1.284,645,1.284,646,1.284,647,1.284,648,1.284,649,1.284,650,1.284,651,1.284,652,1.284,653,1.284,654,1.284,655,2.049,656,1.284,657,1.284,658,1.284,659,1.284,660,1.284,661,1.284,662,1.284,663,2.049,664,1.284,665,1.284,666,2.556,667,1.284,668,1.284,669,1.284,670,0.999,671,1.284,672,1.284,673,1.284,674,1.284,675,1.284]],["title/coverage.html",[676,2.592]],["body/coverage.html",[0,1.161,1,1.356,5,1.13,6,2.422,19,0.937,23,0.071,55,0.768,63,0.768,80,0.057,81,0.057,82,1.356,83,2.648,84,2.648,149,1.627,155,1.967,157,1.967,228,2.437,229,1.967,231,2.29,232,2.29,233,2.29,243,1.967,250,1.967,251,1.967,254,1.967,321,3.685,365,2.422,420,1.967,676,2.422,677,3.112,678,3.112,679,3.856,680,4.379,681,4.379,682,3.112,683,3.112,684,3.112,685,3.112]],["title/dependencies.html",[542,1.634,686,2.311]],["body/dependencies.html",[23,0.073,41,1.241,51,1.489,80,0.054,81,0.054,122,2.216,123,2.216,124,2.216,148,2.216,240,1.8,686,2.216,687,2.847,688,4.616,689,2.847,690,2.847,691,2.847,692,2.847,693,2.847,694,2.847,695,2.847,696,2.847,697,2.847,698,3.646,699,3.646,700,2.847,701,2.847,702,4.021,703,3.646,704,2.847,705,2.847,706,2.847,707,2.847,708,2.847,709,2.847,710,2.847,711,2.847,712,4.021,713,2.847,714,2.847,715,2.216,716,3.646,717,2.847,718,2.847,719,2.847,720,2.847,721,2.847,722,2.847,723,2.847,724,2.847,725,2.847,726,2.847,727,2.847,728,2.847,729,3.646,730,3.646,731,2.847,732,2.847,733,2.847,734,2.847,735,2.847,736,2.847,737,2.847,738,2.847,739,2.847,740,2.847,741,2.847]],["title/index.html",[7,0.518,350,1.328,351,1.328]],["body/index.html",[4,1.233,23,0.066,42,1.896,80,0.06,81,0.06,244,1.479,353,3.163,354,3.386,389,2.641,411,2.641,454,2.641,562,3.163,576,2.641,670,3.386,742,3.394,743,4.065,744,3.394,745,3.394,746,3.394,747,3.394,748,2.641,749,3.394,750,2.641,751,3.394,752,3.394,753,4.065,754,3.394,755,4.065,756,4.065,757,3.394]],["title/license.html",[350,1.328,351,1.328,481,1.328]],["body/license.html",[23,0.055,25,1.958,42,1.294,69,1.877,80,0.055,81,0.055,244,1.294,348,2.311,386,2.311,420,1.877,453,2.311,472,2.914,478,2.311,479,2.311,481,1.877,524,2.914,559,2.914,565,2.311,715,2.311,748,2.311,750,3.655,758,4.101,759,2.97,760,2.97,761,2.97,762,2.97,763,2.97,764,2.97,765,2.97,766,2.97,767,3.745,768,2.97,769,2.97,770,2.97,771,4.101,772,2.97,773,2.97,774,2.97,775,2.97,776,2.97,777,2.97,778,2.97,779,2.97,780,2.97,781,3.745,782,2.97,783,2.97,784,2.97,785,2.97,786,2.97,787,2.97,788,3.745,789,2.97,790,2.97,791,2.97,792,2.97,793,2.97,794,2.97,795,2.97,796,2.97,797,2.97,798,2.97,799,2.97,800,2.97,801,2.97,802,2.97,803,2.97,804,2.97,805,2.97,806,2.97,807,2.97,808,2.97,809,2.97,810,2.97,811,2.97,812,2.97,813,2.97]],["title/modules.html",[814,2.592]],["body/modules.html",[23,0.064,80,0.064,81,0.064,814,2.967]],["title/overview.html",[815,2.592]],["body/overview.html",[2,2.366,23,0.063,55,0.923,80,0.063,81,0.063,230,2.366,815,2.913,816,4.305,817,3.743]],["title/miscellaneous/typealiases.html",[818,1.098,819,2.97]],["body/miscellaneous/typealiases.html",[7,0.891,18,2.283,19,1.27,23,0.066,73,2.665,80,0.062,81,0.062,173,2.283,254,2.283,267,3.282,290,3.282,305,2.811,818,1.889,820,3.612,821,4.467]],["title/miscellaneous/variables.html",[818,1.098,822,2.311]],["body/miscellaneous/variables.html",[7,0.778,23,0.072,36,2.3,37,2.3,52,1.693,53,1.693,63,1.085,80,0.057,81,0.057,83,1.992,84,2.663,120,2.032,155,2.456,156,2.453,157,2.456,158,2.453,231,2.032,232,2.3,233,2.3,243,2.663,244,1.693,245,2.453,251,2.663,818,1.648,822,2.453,823,3.886,824,3.886]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":321,"title":{},"body":{"classes/Repository.html":{},"coverage.html":{}}}],["0.1.13",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":817,"title":{},"body":{"overview.html":{}}}],["1.1.1",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["1.6.21",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["10.5.4",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":475,"title":{},"body":{"contributing.html":{}}}],["12.0.0",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["12.2.0",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["13.0.2",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["13.1.3",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["16.8.4",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":816,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":760,"title":{},"body":{"license.html":{}}}],["5.5.3",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["6.4.95",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["7.2.2",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["8.1.1",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["8.2.4",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["_dbinstance",{"_index":85,"title":{},"body":{"injectables/EntityManager.html":{}}}],["above",{"_index":787,"title":{},"body":{"license.html":{}}}],["accordingly",{"_index":588,"title":{},"body":{"contributing.html":{}}}],["acl",{"_index":1,"title":{"injectables/ACL.html":{}},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"coverage.html":{}}}],["action",{"_index":348,"title":{},"body":{"classes/Repository.html":{},"license.html":{}}}],["actual",{"_index":570,"title":{},"body":{"contributing.html":{}}}],["adapter",{"_index":123,"title":{},"body":{"injectables/EntityManager.html":{},"dependencies.html":{}}}],["add",{"_index":625,"title":{},"body":{"contributing.html":{}}}],["addbasecollections",{"_index":87,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addbasecollections(db",{"_index":98,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addinitialdata",{"_index":88,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addinitialdata(db",{"_index":102,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addpouchplugin",{"_index":134,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addpouchplugin(pouchdbadapteridb",{"_index":150,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addressed",{"_index":598,"title":{},"body":{"contributing.html":{}}}],["addrxplugin",{"_index":125,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbdevmodeplugin",{"_index":151,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbencryptionplugin",{"_index":153,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbquerybuilderplugin",{"_index":154,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbvalidateplugin",{"_index":152,"title":{},"body":{"injectables/EntityManager.html":{}}}],["advance",{"_index":501,"title":{},"body":{"contributing.html":{}}}],["advisable",{"_index":448,"title":{},"body":{"contributing.html":{}}}],["agree",{"_index":473,"title":{},"body":{"contributing.html":{}}}],["aims",{"_index":632,"title":{},"body":{"contributing.html":{}}}],["aliases",{"_index":820,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alpha.70",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":58,"title":{},"body":{"injectables/ACL.html":{},"contributing.html":{}}}],["alternatives",{"_index":658,"title":{},"body":{"contributing.html":{}}}],["and/or",{"_index":779,"title":{},"body":{"license.html":{}}}],["angular/animations",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":41,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":240,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"dependencies.html":{}}}],["animated",{"_index":662,"title":{},"body":{"contributing.html":{}}}],["answers",{"_index":450,"title":{},"body":{"contributing.html":{}}}],["app",{"_index":754,"title":{},"body":{"index.html":{}}}],["appid",{"_index":67,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["applicationpermissionscollection",{"_index":29,"title":{},"body":{"injectables/ACL.html":{}}}],["appreciation",{"_index":398,"title":{},"body":{"contributing.html":{}}}],["apps",{"_index":752,"title":{},"body":{"index.html":{}}}],["arising",{"_index":811,"title":{},"body":{"license.html":{}}}],["arm",{"_index":537,"title":{},"body":{"contributing.html":{}}}],["ask",{"_index":434,"title":{},"body":{"contributing.html":{}}}],["associated",{"_index":768,"title":{},"body":{"license.html":{}}}],["assume",{"_index":435,"title":{},"body":{"contributing.html":{}}}],["attachment",{"_index":290,"title":{},"body":{"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["attachment.id",{"_index":330,"title":{},"body":{"classes/Repository.html":{}}}],["attachment.remove",{"_index":340,"title":{},"body":{"classes/Repository.html":{}}}],["attachment.type",{"_index":335,"title":{},"body":{"classes/Repository.html":{}}}],["attachmentid",{"_index":279,"title":{},"body":{"classes/Repository.html":{}}}],["attachments.map((attachment",{"_index":338,"title":{},"body":{"classes/Repository.html":{}}}],["attribution",{"_index":672,"title":{},"body":{"contributing.html":{}}}],["authored",{"_index":474,"title":{},"body":{"contributing.html":{}}}],["authors",{"_index":802,"title":{},"body":{"license.html":{}}}],["available",{"_index":436,"title":{},"body":{"contributing.html":{}}}],["basecollections",{"_index":95,"title":{},"body":{"injectables/EntityManager.html":{}}}],["based",{"_index":674,"title":{},"body":{"contributing.html":{}}}],["before",{"_index":379,"title":{},"body":{"contributing.html":{}}}],["behavior",{"_index":433,"title":{},"body":{"contributing.html":{}}}],["best",{"_index":437,"title":{},"body":{"contributing.html":{}}}],["beta.35",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":669,"title":{},"body":{"contributing.html":{}}}],["blobbuffer",{"_index":303,"title":{},"body":{"classes/Repository.html":{}}}],["boolean",{"_index":114,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["browser",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["bug",{"_index":483,"title":{},"body":{"contributing.html":{}}}],["bugs",{"_index":416,"title":{},"body":{"contributing.html":{}}}],["builder",{"_index":139,"title":{},"body":{"injectables/EntityManager.html":{}}}],["c",{"_index":759,"title":{},"body":{"license.html":{}}}],["can't",{"_index":563,"title":{},"body":{"contributing.html":{}}}],["canactivate",{"_index":234,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["care",{"_index":468,"title":{},"body":{"contributing.html":{}}}],["carefully",{"_index":495,"title":{},"body":{"contributing.html":{}}}],["case",{"_index":441,"title":{},"body":{"contributing.html":{}}}],["central",{"_index":42,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["charge",{"_index":764,"title":{},"body":{"license.html":{}}}],["chase",{"_index":489,"title":{},"body":{"contributing.html":{}}}],["check",{"_index":516,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":805,"title":{},"body":{"license.html":{}}}],["clarification",{"_index":446,"title":{},"body":{"contributing.html":{}}}],["class",{"_index":55,"title":{"classes/Repository.html":{}},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":253,"title":{},"body":{"classes/Repository.html":{}}}],["classic",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["clear",{"_index":651,"title":{},"body":{"contributing.html":{}}}],["clsx",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["code",{"_index":411,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["codex",{"_index":756,"title":{},"body":{"index.html":{}}}],["collect",{"_index":496,"title":{},"body":{"contributing.html":{}}}],["collected",{"_index":583,"title":{},"body":{"contributing.html":{}}}],["collection",{"_index":11,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["collection.findone",{"_index":213,"title":{},"body":{"injectables/EntityManager.html":{}}}],["collection.preinsert((data",{"_index":198,"title":{},"body":{"injectables/EntityManager.html":{}}}],["collection.presave((data",{"_index":204,"title":{},"body":{"injectables/EntityManager.html":{}}}],["collectionname",{"_index":112,"title":{},"body":{"injectables/EntityManager.html":{}}}],["comment",{"_index":626,"title":{},"body":{"contributing.html":{}}}],["commit",{"_index":422,"title":{},"body":{"contributing.html":{}}}],["community",{"_index":389,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["compiler",{"_index":539,"title":{},"body":{"contributing.html":{}}}],["complete",{"_index":499,"title":{},"body":{"contributing.html":{}}}],["completely",{"_index":612,"title":{},"body":{"contributing.html":{}}}],["components/versions",{"_index":514,"title":{},"body":{"contributing.html":{}}}],["conditions",{"_index":786,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":412,"title":{},"body":{"contributing.html":{}}}],["configuration",{"_index":623,"title":{},"body":{"contributing.html":{}}}],["connection",{"_index":812,"title":{},"body":{"license.html":{}}}],["consider",{"_index":646,"title":{},"body":{"contributing.html":{}}}],["console.warn('permissionsservice",{"_index":57,"title":{},"body":{"injectables/ACL.html":{}}}],["const",{"_index":72,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["constructor(acl",{"_index":94,"title":{},"body":{"injectables/EntityManager.html":{}}}],["constructor(appid",{"_index":268,"title":{},"body":{"classes/Repository.html":{}}}],["constructor(entitymanager",{"_index":235,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["content",{"_index":476,"title":{},"body":{"contributing.html":{}}}],["contents",{"_index":366,"title":{},"body":{"contributing.html":{}}}],["context",{"_index":457,"title":{},"body":{"contributing.html":{}}}],["contract",{"_index":808,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":359,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":352,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":381,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":361,"title":{},"body":{"contributing.html":{}}}],["convince",{"_index":634,"title":{},"body":{"contributing.html":{}}}],["copies",{"_index":781,"title":{},"body":{"license.html":{}}}],["copy",{"_index":767,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":758,"title":{},"body":{"license.html":{}}}],["core",{"_index":744,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":676,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":620,"title":{},"body":{"contributing.html":{}}}],["create",{"_index":580,"title":{},"body":{"contributing.html":{}}}],["created.guard.ts",{"_index":233,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["created.guard.ts:17",{"_index":238,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["created.guard.ts:25",{"_index":239,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["createdatabase",{"_index":89,"title":{},"body":{"injectables/EntityManager.html":{}}}],["createdatabase(name",{"_index":104,"title":{},"body":{"injectables/EntityManager.html":{}}}],["createrxdatabase",{"_index":126,"title":{},"body":{"injectables/EntityManager.html":{}}}],["creator",{"_index":161,"title":{},"body":{"injectables/EntityManager.html":{}}}],["critical",{"_index":605,"title":{},"body":{"contributing.html":{}}}],["current",{"_index":190,"title":{},"body":{"injectables/EntityManager.html":{},"contributing.html":{}}}],["current.creator",{"_index":193,"title":{},"body":{"injectables/EntityManager.html":{}}}],["current.name",{"_index":192,"title":{},"body":{"injectables/EntityManager.html":{}}}],["damages",{"_index":806,"title":{},"body":{"license.html":{}}}],["data",{"_index":163,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["data.createdat",{"_index":202,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.data.map((doc",{"_index":210,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.id",{"_index":201,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.name",{"_index":221,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.updatedat",{"_index":203,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.upsert",{"_index":209,"title":{},"body":{"injectables/EntityManager.html":{}}}],["database",{"_index":232,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databasecollections",{"_index":176,"title":{},"body":{"injectables/EntityManager.html":{}}}],["date().toisostring",{"_index":200,"title":{},"body":{"injectables/EntityManager.html":{}}}],["db",{"_index":101,"title":{},"body":{"injectables/EntityManager.html":{}}}],["db.addcollections(basecollections",{"_index":194,"title":{},"body":{"injectables/EntityManager.html":{}}}],["db.applicationpermissions.upsert(permission",{"_index":227,"title":{},"body":{"injectables/EntityManager.html":{}}}],["db[data.name",{"_index":208,"title":{},"body":{"injectables/EntityManager.html":{}}}],["deal",{"_index":770,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":813,"title":{},"body":{"license.html":{}}}],["deepreadonly",{"_index":304,"title":{},"body":{"classes/Repository.html":{}}}],["default",{"_index":36,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"miscellaneous/variables.html":{}}}],["defer",{"_index":48,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["defined",{"_index":20,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["demonstrate",{"_index":664,"title":{},"body":{"contributing.html":{}}}],["dependencies",{"_index":686,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":465,"title":{},"body":{"contributing.html":{}}}],["describe",{"_index":497,"title":{},"body":{"contributing.html":{}}}],["description",{"_index":656,"title":{},"body":{"contributing.html":{}}}],["descriptive",{"_index":652,"title":{},"body":{"contributing.html":{}}}],["detail",{"_index":498,"title":{},"body":{"contributing.html":{}}}],["details",{"_index":370,"title":{},"body":{"contributing.html":{}}}],["determine",{"_index":508,"title":{},"body":{"contributing.html":{}}}],["developers",{"_index":635,"title":{},"body":{"contributing.html":{}}}],["development",{"_index":751,"title":{},"body":{"index.html":{}}}],["different",{"_index":367,"title":{},"body":{"contributing.html":{}}}],["discussed",{"_index":529,"title":{},"body":{"contributing.html":{}}}],["distribute",{"_index":777,"title":{},"body":{"license.html":{}}}],["doc",{"_index":79,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["doc.additionalproperties?.permissions",{"_index":223,"title":{},"body":{"injectables/EntityManager.html":{}}}],["doc.allattachments",{"_index":341,"title":{},"body":{"classes/Repository.html":{}}}],["doc.getattachment(attachmentid",{"_index":339,"title":{},"body":{"classes/Repository.html":{}}}],["doc.id",{"_index":214,"title":{},"body":{"injectables/EntityManager.html":{}}}],["doc.id}:${permission.kind}:${permission.mode}:${permission.target",{"_index":225,"title":{},"body":{"injectables/EntityManager.html":{}}}],["doc.putattachment(attachment",{"_index":328,"title":{},"body":{"classes/Repository.html":{}}}],["doc.tojson",{"_index":310,"title":{},"body":{"classes/Repository.html":{}}}],["docid",{"_index":277,"title":{},"body":{"classes/Repository.html":{}}}],["docs.length",{"_index":320,"title":{},"body":{"classes/Repository.html":{}}}],["docs.map((doc",{"_index":317,"title":{},"body":{"classes/Repository.html":{}}}],["docs[0",{"_index":322,"title":{},"body":{"classes/Repository.html":{}}}],["document",{"_index":205,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["document.createdat",{"_index":206,"title":{},"body":{"injectables/EntityManager.html":{}}}],["documentation",{"_index":420,"title":{},"body":{"contributing.html":{},"coverage.html":{},"license.html":{}}}],["docusaurus/core",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["docusaurus/preset",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["dom",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["don't",{"_index":392,"title":{},"body":{"contributing.html":{}}}],["dynamic",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":511,"title":{},"body":{"contributing.html":{}}}],["easier",{"_index":383,"title":{},"body":{"contributing.html":{}}}],["easy",{"_index":395,"title":{},"body":{"contributing.html":{}}}],["editions",{"_index":745,"title":{},"body":{"index.html":{}}}],["elsewhere",{"_index":554,"title":{},"body":{"contributing.html":{}}}],["email",{"_index":558,"title":{},"body":{"contributing.html":{}}}],["encouraged",{"_index":362,"title":{},"body":{"contributing.html":{}}}],["enhancement",{"_index":610,"title":{},"body":{"contributing.html":{}}}],["enhancements",{"_index":418,"title":{},"body":{"contributing.html":{}}}],["entity_manager_base_collections_token",{"_index":155,"title":{},"body":{"injectables/EntityManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entity_manager_initial_data_token",{"_index":157,"title":{},"body":{"injectables/EntityManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entitymanager",{"_index":82,"title":{"injectables/EntityManager.html":{}},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{}}}],["environment",{"_index":513,"title":{},"body":{"contributing.html":{}}}],["error",{"_index":346,"title":{},"body":{"classes/Repository.html":{},"contributing.html":{}}}],["error('collection",{"_index":180,"title":{},"body":{"injectables/EntityManager.html":{}}}],["error('database",{"_index":177,"title":{},"body":{"injectables/EntityManager.html":{}}}],["error('no",{"_index":326,"title":{},"body":{"classes/Repository.html":{}}}],["error('permissionsservice",{"_index":64,"title":{},"body":{"injectables/ACL.html":{}}}],["errors",{"_index":561,"title":{},"body":{"contributing.html":{}}}],["etc",{"_index":464,"title":{},"body":{"contributing.html":{}}}],["event",{"_index":801,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":426,"title":{},"body":{"contributing.html":{}}}],["exec",{"_index":215,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["existing",{"_index":439,"title":{},"body":{"contributing.html":{}}}],["expect",{"_index":569,"title":{},"body":{"contributing.html":{}}}],["expected",{"_index":429,"title":{},"body":{"contributing.html":{}}}],["experience",{"_index":387,"title":{},"body":{"contributing.html":{}}}],["experienced",{"_index":518,"title":{},"body":{"contributing.html":{}}}],["explain",{"_index":568,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":54,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["express",{"_index":715,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["factory",{"_index":244,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["factory's",{"_index":353,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["factory/permissions/collections/application",{"_index":43,"title":{},"body":{"injectables/ACL.html":{}}}],["factory/permissions/models/permission",{"_index":47,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["failureredirectto",{"_index":237,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["faker",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["false",{"_index":38,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["fast",{"_index":504,"title":{},"body":{"contributing.html":{}}}],["feature",{"_index":637,"title":{},"body":{"contributing.html":{}}}],["features",{"_index":613,"title":{},"body":{"contributing.html":{}}}],["feel",{"_index":451,"title":{},"body":{"contributing.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"coverage.html":{}}}],["filed",{"_index":587,"title":{},"body":{"contributing.html":{}}}],["files",{"_index":769,"title":{},"body":{"license.html":{}}}],["find",{"_index":255,"title":{},"body":{"classes/Repository.html":{},"contributing.html":{}}}],["find(query",{"_index":270,"title":{},"body":{"classes/Repository.html":{}}}],["findone",{"_index":256,"title":{},"body":{"classes/Repository.html":{}}}],["findone(query",{"_index":273,"title":{},"body":{"classes/Repository.html":{}}}],["fine",{"_index":394,"title":{},"body":{"contributing.html":{}}}],["first",{"_index":355,"title":{},"body":{"contributing.html":{}}}],["fitness",{"_index":797,"title":{},"body":{"license.html":{}}}],["fits",{"_index":630,"title":{},"body":{"contributing.html":{}}}],["fix",{"_index":502,"title":{},"body":{"contributing.html":{}}}],["follow",{"_index":573,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":453,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["forkjoin",{"_index":142,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["forward",{"_index":391,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":327,"title":{},"body":{"classes/Repository.html":{},"contributing.html":{}}}],["foundation",{"_index":747,"title":{},"body":{"index.html":{}}}],["free",{"_index":763,"title":{},"body":{"license.html":{}}}],["friends/colleagues",{"_index":410,"title":{},"body":{"contributing.html":{}}}],["from(attachment.getdata()).pipe",{"_index":333,"title":{},"body":{"classes/Repository.html":{}}}],["from(collection.upsert(doc)).pipe",{"_index":220,"title":{},"body":{"injectables/EntityManager.html":{}}}],["from(query.exec()).pipe(map((doc",{"_index":78,"title":{},"body":{"injectables/ACL.html":{}}}],["from(this.collection.bulkinsert(permissions)).pipe",{"_index":65,"title":{},"body":{"injectables/ACL.html":{}}}],["functionality",{"_index":616,"title":{},"body":{"contributing.html":{}}}],["furnished",{"_index":784,"title":{},"body":{"license.html":{}}}],["gen",{"_index":675,"title":{},"body":{"contributing.html":{}}}],["getallattachments",{"_index":257,"title":{},"body":{"classes/Repository.html":{}}}],["getallattachments(docid",{"_index":275,"title":{},"body":{"classes/Repository.html":{}}}],["getattachment",{"_index":258,"title":{},"body":{"classes/Repository.html":{}}}],["getattachment(docid",{"_index":278,"title":{},"body":{"classes/Repository.html":{}}}],["getrepository",{"_index":90,"title":{},"body":{"injectables/EntityManager.html":{}}}],["getrepository(collectionname",{"_index":107,"title":{},"body":{"injectables/EntityManager.html":{}}}],["getrxstoragepouch",{"_index":135,"title":{},"body":{"injectables/EntityManager.html":{}}}],["getrxstoragepouch('idb",{"_index":185,"title":{},"body":{"injectables/EntityManager.html":{}}}],["getting",{"_index":350,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["gifs",{"_index":663,"title":{},"body":{"contributing.html":{}}}],["github",{"_index":528,"title":{},"body":{"contributing.html":{}}}],["good",{"_index":484,"title":{},"body":{"contributing.html":{}}}],["governed",{"_index":428,"title":{},"body":{"contributing.html":{}}}],["granted",{"_index":762,"title":{},"body":{"license.html":{}}}],["guard",{"_index":228,"title":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":230,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"overview.html":{}}}],["guide",{"_index":673,"title":{},"body":{"contributing.html":{}}}],["guidelines",{"_index":617,"title":{},"body":{"contributing.html":{}}}],["guides",{"_index":608,"title":{},"body":{"contributing.html":{}}}],["handles",{"_index":372,"title":{},"body":{"contributing.html":{}}}],["happy",{"_index":400,"title":{},"body":{"contributing.html":{}}}],["haspermission",{"_index":14,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["haspermission(permission",{"_index":17,"title":{},"body":{"injectables/ACL.html":{}}}],["having",{"_index":522,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":369,"title":{},"body":{"contributing.html":{}}}],["hereby",{"_index":761,"title":{},"body":{"license.html":{}}}],["holders",{"_index":803,"title":{},"body":{"license.html":{}}}],["id",{"_index":76,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["idb",{"_index":124,"title":{},"body":{"injectables/EntityManager.html":{},"dependencies.html":{}}}],["idea",{"_index":629,"title":{},"body":{"contributing.html":{}}}],["identifier",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":654,"title":{},"body":{"contributing.html":{}}}],["implemented",{"_index":607,"title":{},"body":{"contributing.html":{}}}],["implements",{"_index":246,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["implied",{"_index":793,"title":{},"body":{"license.html":{}}}],["import",{"_index":40,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["improvements",{"_index":615,"title":{},"body":{"contributing.html":{}}}],["improving",{"_index":419,"title":{},"body":{"contributing.html":{}}}],["include",{"_index":660,"title":{},"body":{"contributing.html":{}}}],["included",{"_index":789,"title":{},"body":{"license.html":{}}}],["includes",{"_index":576,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["including",{"_index":524,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["incompatible",{"_index":512,"title":{},"body":{"contributing.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":622,"title":{},"body":{"contributing.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["information",{"_index":492,"title":{},"body":{"contributing.html":{}}}],["initialdata",{"_index":96,"title":{},"body":{"injectables/EntityManager.html":{}}}],["initialize",{"_index":15,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["initialize(collection",{"_index":28,"title":{},"body":{"injectables/ACL.html":{}}}],["initialized",{"_index":59,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["inject",{"_index":119,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["inject(entity_manager_base_collections_token",{"_index":160,"title":{},"body":{"injectables/EntityManager.html":{}}}],["inject(entity_manager_initial_data_token",{"_index":162,"title":{},"body":{"injectables/EntityManager.html":{}}}],["inject(on_database_created_guard_failure_redirect_token",{"_index":247,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{}}}],["inject(on_not_database_created_guard_failure_redirect_token",{"_index":252,"title":{},"body":{"guards/IsNotDatabaseCreatedGuard.html":{}}}],["injectable",{"_index":0,"title":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"overview.html":{}}}],["injectiontoken",{"_index":120,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('entity_manager_base_collections_token",{"_index":156,"title":{},"body":{"injectables/EntityManager.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('entity_manager_initial_data_token",{"_index":158,"title":{},"body":{"injectables/EntityManager.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":544,"title":{},"body":{"contributing.html":{}}}],["insert",{"_index":259,"title":{},"body":{"classes/Repository.html":{}}}],["insert(doc",{"_index":281,"title":{},"body":{"classes/Repository.html":{}}}],["inspiration",{"_index":671,"title":{},"body":{"contributing.html":{}}}],["instead",{"_index":555,"title":{},"body":{"contributing.html":{}}}],["internet",{"_index":449,"title":{},"body":{"contributing.html":{}}}],["interpreter",{"_index":538,"title":{},"body":{"contributing.html":{}}}],["investigate",{"_index":494,"title":{},"body":{"contributing.html":{}}}],["involved",{"_index":388,"title":{},"body":{"contributing.html":{}}}],["isdatabasecreated",{"_index":91,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["isdatabasecreatedguard",{"_index":229,"title":{"guards/IsDatabaseCreatedGuard.html":{}},"body":{"guards/IsDatabaseCreatedGuard.html":{},"coverage.html":{}}}],["isinitialized",{"_index":12,"title":{},"body":{"injectables/ACL.html":{}}}],["isnotdatabasecreatedguard",{"_index":250,"title":{"guards/IsNotDatabaseCreatedGuard.html":{}},"body":{"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{}}}],["isolate",{"_index":578,"title":{},"body":{"contributing.html":{}}}],["issue",{"_index":443,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":440,"title":{},"body":{"contributing.html":{}}}],["it's",{"_index":586,"title":{},"body":{"contributing.html":{}}}],["join",{"_index":424,"title":{},"body":{"contributing.html":{}}}],["js/react",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["keep",{"_index":638,"title":{},"body":{"contributing.html":{}}}],["key",{"_index":187,"title":{},"body":{"injectables/EntityManager.html":{}}}],["keyof",{"_index":175,"title":{},"body":{"injectables/EntityManager.html":{}}}],["kind",{"_index":69,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{},"license.html":{}}}],["label",{"_index":567,"title":{},"body":{"contributing.html":{}}}],["latest",{"_index":506,"title":{},"body":{"contributing.html":{}}}],["layout",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["leave",{"_index":486,"title":{},"body":{"contributing.html":{}}}],["left",{"_index":606,"title":{},"body":{"contributing.html":{}}}],["legal",{"_index":471,"title":{},"body":{"contributing.html":{}}}],["liability",{"_index":807,"title":{},"body":{"license.html":{}}}],["liable",{"_index":804,"title":{},"body":{"license.html":{}}}],["library",{"_index":649,"title":{},"body":{"contributing.html":{}}}],["libs/.../entity",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../is",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../repository.ts",{"_index":821,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/persistence/src/lib/guards/is",{"_index":231,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/persistence/src/lib/services/acl.ts",{"_index":6,"title":{},"body":{"injectables/ACL.html":{},"coverage.html":{}}}],["libs/persistence/src/lib/services/acl.ts:14",{"_index":35,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/acl.ts:16",{"_index":39,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/acl.ts:18",{"_index":30,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/acl.ts:28",{"_index":33,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/acl.ts:42",{"_index":21,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/entity",{"_index":83,"title":{},"body":{"injectables/EntityManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/persistence/src/lib/services/repository.ts",{"_index":254,"title":{},"body":{"classes/Repository.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["libs/persistence/src/lib/services/repository.ts:106",{"_index":294,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:115",{"_index":292,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:143",{"_index":280,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:181",{"_index":276,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:217",{"_index":296,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:248",{"_index":286,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:284",{"_index":298,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:36",{"_index":269,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:47",{"_index":282,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:54",{"_index":302,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:61",{"_index":274,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:70",{"_index":271,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:79",{"_index":284,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:88",{"_index":288,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:96",{"_index":300,"title":{},"body":{"classes/Repository.html":{}}}],["license",{"_index":481,"title":{"license.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["licensed",{"_index":749,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":773,"title":{},"body":{"license.html":{}}}],["limited",{"_index":794,"title":{},"body":{"license.html":{}}}],["linux",{"_index":534,"title":{},"body":{"contributing.html":{}}}],["literal",{"_index":18,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":407,"title":{},"body":{"contributing.html":{}}}],["login",{"_index":245,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"miscellaneous/variables.html":{}}}],["looking",{"_index":515,"title":{},"body":{"contributing.html":{}}}],["looks",{"_index":390,"title":{},"body":{"contributing.html":{}}}],["lot",{"_index":382,"title":{},"body":{"contributing.html":{}}}],["macos",{"_index":535,"title":{},"body":{"contributing.html":{}}}],["maintainers",{"_index":384,"title":{},"body":{"contributing.html":{}}}],["majority",{"_index":641,"title":{},"body":{"contributing.html":{}}}],["make",{"_index":374,"title":{},"body":{"contributing.html":{}}}],["making",{"_index":380,"title":{},"body":{"contributing.html":{}}}],["manager",{"_index":242,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"contributing.html":{}}}],["manager.ts",{"_index":84,"title":{},"body":{"injectables/EntityManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.ts:127",{"_index":106,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:142",{"_index":100,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:178",{"_index":103,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:65",{"_index":118,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:67",{"_index":97,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:84",{"_index":116,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:94",{"_index":113,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:98",{"_index":108,"title":{},"body":{"injectables/EntityManager.html":{}}}],["mangoquery",{"_index":305,"title":{},"body":{"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["many",{"_index":657,"title":{},"body":{"contributing.html":{}}}],["map",{"_index":49,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["map((attachment",{"_index":329,"title":{},"body":{"classes/Repository.html":{}}}],["map((data",{"_index":334,"title":{},"body":{"classes/Repository.html":{}}}],["map((doc",{"_index":309,"title":{},"body":{"classes/Repository.html":{}}}],["map((docs",{"_index":316,"title":{},"body":{"classes/Repository.html":{}}}],["map((permission",{"_index":224,"title":{},"body":{"injectables/EntityManager.html":{}}}],["mark",{"_index":594,"title":{},"body":{"contributing.html":{}}}],["marked",{"_index":601,"title":{},"body":{"contributing.html":{}}}],["matching",{"_index":81,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maybe",{"_index":621,"title":{},"body":{"contributing.html":{}}}],["mdi/svg",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["mdx",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["meetups",{"_index":408,"title":{},"body":{"contributing.html":{}}}],["member",{"_index":589,"title":{},"body":{"contributing.html":{}}}],["mention",{"_index":406,"title":{},"body":{"contributing.html":{}}}],["merchantability",{"_index":796,"title":{},"body":{"license.html":{}}}],["merge",{"_index":775,"title":{},"body":{"license.html":{}}}],["merits",{"_index":636,"title":{},"body":{"contributing.html":{}}}],["messages",{"_index":423,"title":{},"body":{"contributing.html":{}}}],["metadata",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["metaverse",{"_index":354,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["mind",{"_index":639,"title":{},"body":{"contributing.html":{}}}],["minor",{"_index":614,"title":{},"body":{"contributing.html":{}}}],["minority",{"_index":645,"title":{},"body":{"contributing.html":{}}}],["miscellaneous",{"_index":818,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":748,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":70,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["modify",{"_index":774,"title":{},"body":{"license.html":{}}}],["modules",{"_index":814,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":491,"title":{},"body":{"contributing.html":{}}}],["much",{"_index":456,"title":{},"body":{"contributing.html":{}}}],["name",{"_index":24,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["necessary",{"_index":477,"title":{},"body":{"contributing.html":{}}}],["need",{"_index":445,"title":{},"body":{"contributing.html":{}}}],["needing",{"_index":488,"title":{},"body":{"contributing.html":{}}}],["needs",{"_index":595,"title":{},"body":{"contributing.html":{}}}],["nestjs/common",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["never",{"_index":550,"title":{},"body":{"contributing.html":{}}}],["new",{"_index":63,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ng",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["nodejs",{"_index":462,"title":{},"body":{"contributing.html":{}}}],["noninfringement",{"_index":800,"title":{},"body":{"license.html":{}}}],["notice",{"_index":472,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["now",{"_index":199,"title":{},"body":{"injectables/EntityManager.html":{}}}],["npm",{"_index":463,"title":{},"body":{"contributing.html":{}}}],["nrwl/angular",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":312,"title":{},"body":{"classes/Repository.html":{}}}],["nx",{"_index":755,"title":{},"body":{"index.html":{}}}],["object.assign(result",{"_index":191,"title":{},"body":{"injectables/EntityManager.html":{}}}],["object.values(db).foreach((collection",{"_index":197,"title":{},"body":{"injectables/EntityManager.html":{}}}],["observable",{"_index":27,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["observe",{"_index":260,"title":{},"body":{"classes/Repository.html":{}}}],["observe(query",{"_index":283,"title":{},"body":{"classes/Repository.html":{}}}],["observeattachments",{"_index":261,"title":{},"body":{"classes/Repository.html":{}}}],["observeattachments(docid",{"_index":285,"title":{},"body":{"classes/Repository.html":{}}}],["observeone",{"_index":262,"title":{},"body":{"classes/Repository.html":{}}}],["observeone(query",{"_index":287,"title":{},"body":{"classes/Repository.html":{}}}],["obtaining",{"_index":766,"title":{},"body":{"license.html":{}}}],["obvious",{"_index":591,"title":{},"body":{"contributing.html":{}}}],["of(doc.allattachments",{"_index":336,"title":{},"body":{"classes/Repository.html":{}}}],["of(doc.getattachment(attachmentid",{"_index":331,"title":{},"body":{"classes/Repository.html":{}}}],["of(haspermission",{"_index":349,"title":{},"body":{"classes/Repository.html":{}}}],["of(repository",{"_index":183,"title":{},"body":{"injectables/EntityManager.html":{}}}],["of(true",{"_index":212,"title":{},"body":{"injectables/EntityManager.html":{}}}],["of(undefined",{"_index":219,"title":{},"body":{"injectables/EntityManager.html":{}}}],["older",{"_index":548,"title":{},"body":{"contributing.html":{}}}],["on/plugin",{"_index":648,"title":{},"body":{"contributing.html":{}}}],["on_database_created_guard_failure_redirect_token",{"_index":243,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["on_not_database_created_guard_failure_redirect_token",{"_index":251,"title":{},"body":{"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["once",{"_index":585,"title":{},"body":{"contributing.html":{}}}],["one",{"_index":628,"title":{},"body":{"contributing.html":{}}}],["open",{"_index":454,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["opening",{"_index":627,"title":{},"body":{"contributing.html":{}}}],["optional",{"_index":10,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["ormmethods",{"_index":110,"title":{},"body":{"injectables/EntityManager.html":{}}}],["os",{"_index":532,"title":{},"body":{"contributing.html":{}}}],["others",{"_index":487,"title":{},"body":{"contributing.html":{}}}],["otherwise",{"_index":810,"title":{},"body":{"license.html":{}}}],["out",{"_index":386,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["output",{"_index":545,"title":{},"body":{"contributing.html":{}}}],["outside",{"_index":527,"title":{},"body":{"contributing.html":{}}}],["overflow",{"_index":526,"title":{},"body":{"contributing.html":{}}}],["overview",{"_index":815,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":542,"title":{"dependencies.html":{}},"body":{"contributing.html":{}}}],["packages",{"_index":743,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["part",{"_index":665,"title":{},"body":{"contributing.html":{}}}],["participating",{"_index":427,"title":{},"body":{"contributing.html":{}}}],["particular",{"_index":798,"title":{},"body":{"license.html":{}}}],["password",{"_index":105,"title":{},"body":{"injectables/EntityManager.html":{}}}],["password).pipe",{"_index":166,"title":{},"body":{"injectables/EntityManager.html":{}}}],["perform",{"_index":347,"title":{},"body":{"classes/Repository.html":{},"contributing.html":{}}}],["permission",{"_index":25,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"license.html":{}}}],["permission.appid}:${permission.kind}:${permission.mode}:${permission.target",{"_index":77,"title":{},"body":{"injectables/ACL.html":{}}}],["permissionkind",{"_index":45,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["permissionkind.collection",{"_index":343,"title":{},"body":{"classes/Repository.html":{}}}],["permissionmode",{"_index":46,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["permissions",{"_index":34,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["permissions.collection",{"_index":44,"title":{},"body":{"injectables/ACL.html":{}}}],["permissions.map((permission",{"_index":226,"title":{},"body":{"injectables/EntityManager.html":{}}}],["permit",{"_index":782,"title":{},"body":{"license.html":{}}}],["person",{"_index":765,"title":{},"body":{"license.html":{}}}],["persons",{"_index":783,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":196,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["pipe(map((result",{"_index":216,"title":{},"body":{"injectables/EntityManager.html":{}}}],["pipe(tap((db",{"_index":186,"title":{},"body":{"injectables/EntityManager.html":{}}}],["platform",{"_index":460,"title":{},"body":{"contributing.html":{}}}],["please",{"_index":373,"title":{},"body":{"contributing.html":{}}}],["point",{"_index":564,"title":{},"body":{"contributing.html":{}}}],["portal",{"_index":753,"title":{},"body":{"index.html":{}}}],["portions",{"_index":791,"title":{},"body":{"license.html":{}}}],["possible",{"_index":470,"title":{},"body":{"contributing.html":{}}}],["possibly",{"_index":543,"title":{},"body":{"contributing.html":{}}}],["potential",{"_index":503,"title":{},"body":{"contributing.html":{}}}],["potentially",{"_index":519,"title":{},"body":{"contributing.html":{}}}],["pouchdb",{"_index":122,"title":{},"body":{"injectables/EntityManager.html":{},"dependencies.html":{}}}],["pouchdbadapteridb",{"_index":121,"title":{},"body":{"injectables/EntityManager.html":{}}}],["previous",{"_index":584,"title":{},"body":{"contributing.html":{}}}],["private",{"_index":9,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["problem",{"_index":579,"title":{},"body":{"contributing.html":{}}}],["project",{"_index":371,"title":{},"body":{"contributing.html":{}}}],["project's",{"_index":404,"title":{},"body":{"contributing.html":{}}}],["projects",{"_index":668,"title":{},"body":{"contributing.html":{}}}],["promise",{"_index":195,"title":{},"body":{"injectables/EntityManager.html":{}}}],["properties",{"_index":8,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["property",{"_index":746,"title":{},"body":{"index.html":{}}}],["provide",{"_index":455,"title":{},"body":{"contributing.html":{}}}],["provided",{"_index":479,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["providedin",{"_index":52,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":86,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"contributing.html":{}}}],["publish",{"_index":776,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":799,"title":{},"body":{"license.html":{}}}],["putattachment",{"_index":263,"title":{},"body":{"classes/Repository.html":{}}}],["putattachment(docid",{"_index":289,"title":{},"body":{"classes/Repository.html":{}}}],["query",{"_index":73,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["question",{"_index":413,"title":{},"body":{"contributing.html":{}}}],["react",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":376,"title":{},"body":{"contributing.html":{}}}],["readme",{"_index":405,"title":{},"body":{"contributing.html":{}}}],["readonly",{"_index":159,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["really",{"_index":509,"title":{},"body":{"contributing.html":{}}}],["recommend",{"_index":452,"title":{},"body":{"contributing.html":{}}}],["record",{"_index":667,"title":{},"body":{"contributing.html":{}}}],["recreate",{"_index":574,"title":{},"body":{"contributing.html":{}}}],["reduced",{"_index":581,"title":{},"body":{"contributing.html":{}}}],["refer",{"_index":403,"title":{},"body":{"contributing.html":{}}}],["reflect",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":552,"title":{},"body":{"contributing.html":{}}}],["relevant",{"_index":377,"title":{},"body":{"contributing.html":{}}}],["reliably",{"_index":546,"title":{},"body":{"contributing.html":{}}}],["remove",{"_index":264,"title":{},"body":{"classes/Repository.html":{}}}],["remove(query",{"_index":293,"title":{},"body":{"classes/Repository.html":{}}}],["removeattachment",{"_index":265,"title":{},"body":{"classes/Repository.html":{}}}],["removeattachment(docid",{"_index":295,"title":{},"body":{"classes/Repository.html":{}}}],["replaysubject",{"_index":143,"title":{},"body":{"injectables/EntityManager.html":{}}}],["replaysubject(0",{"_index":117,"title":{},"body":{"injectables/EntityManager.html":{}}}],["report",{"_index":431,"title":{},"body":{"contributing.html":{}}}],["reporting",{"_index":415,"title":{},"body":{"contributing.html":{}}}],["reports",{"_index":577,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":149,"title":{"classes/Repository.html":{}},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{},"coverage.html":{}}}],["repository(appid",{"_index":181,"title":{},"body":{"injectables/EntityManager.html":{}}}],["repro",{"_index":596,"title":{},"body":{"contributing.html":{}}}],["reproduce",{"_index":547,"title":{},"body":{"contributing.html":{}}}],["reproduced",{"_index":600,"title":{},"body":{"contributing.html":{}}}],["reproduction",{"_index":571,"title":{},"body":{"contributing.html":{}}}],["requestpermission",{"_index":266,"title":{},"body":{"classes/Repository.html":{}}}],["requestpermission(mode",{"_index":297,"title":{},"body":{"classes/Repository.html":{}}}],["requestpermissions",{"_index":16,"title":{},"body":{"injectables/ACL.html":{}}}],["requestpermissions(permissions",{"_index":32,"title":{},"body":{"injectables/ACL.html":{}}}],["restriction",{"_index":772,"title":{},"body":{"license.html":{}}}],["result",{"_index":189,"title":{},"body":{"injectables/EntityManager.html":{}}}],["results",{"_index":80,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":60,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["returns",{"_index":26,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["rights",{"_index":478,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["root",{"_index":53,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"miscellaneous/variables.html":{}}}],["router",{"_index":236,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["run",{"_index":562,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["running",{"_index":459,"title":{},"body":{"contributing.html":{}}}],["runtime",{"_index":541,"title":{},"body":{"contributing.html":{}}}],["rxcollection",{"_index":127,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["rxcollectioncreator",{"_index":128,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdatabase",{"_index":99,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["rxdb/dist/types/types",{"_index":306,"title":{},"body":{"classes/Repository.html":{}}}],["rxdb/plugins/core",{"_index":129,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/dev",{"_index":131,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/encryption",{"_index":133,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/pouchdb",{"_index":136,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/query",{"_index":138,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/validate",{"_index":141,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbdevmodeplugin",{"_index":130,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbencryptionplugin",{"_index":132,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbquerybuilderplugin",{"_index":137,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbvalidateplugin",{"_index":140,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdocumenttype",{"_index":109,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["rxjs",{"_index":51,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"dependencies.html":{}}}],["same",{"_index":521,"title":{},"body":{"contributing.html":{}}}],["scope",{"_index":631,"title":{},"body":{"contributing.html":{}}}],["screenshots",{"_index":661,"title":{},"body":{"contributing.html":{}}}],["sdk",{"_index":540,"title":{},"body":{"contributing.html":{}}}],["search",{"_index":438,"title":{},"body":{"contributing.html":{}}}],["section",{"_index":378,"title":{},"body":{"contributing.html":{}}}],["security",{"_index":551,"title":{},"body":{"contributing.html":{}}}],["see",{"_index":364,"title":{},"body":{"contributing.html":{}}}],["seems",{"_index":466,"title":{},"body":{"contributing.html":{}}}],["select",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["select/ng",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["selector",{"_index":75,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["sell",{"_index":780,"title":{},"body":{"license.html":{}}}],["sensitive",{"_index":556,"title":{},"body":{"contributing.html":{}}}],["sent",{"_index":557,"title":{},"body":{"contributing.html":{}}}],["serve",{"_index":670,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["services/entity",{"_index":241,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["setupdatabase",{"_index":92,"title":{},"body":{"injectables/EntityManager.html":{}}}],["setupdatabase(name",{"_index":115,"title":{},"body":{"injectables/EntityManager.html":{}}}],["shall",{"_index":788,"title":{},"body":{"license.html":{}}}],["shouldinsert",{"_index":211,"title":{},"body":{"injectables/EntityManager.html":{}}}],["shouldinsert$.pipe",{"_index":217,"title":{},"body":{"injectables/EntityManager.html":{}}}],["shouldn't",{"_index":485,"title":{},"body":{"contributing.html":{}}}],["show",{"_index":397,"title":{},"body":{"contributing.html":{}}}],["side",{"_index":510,"title":{},"body":{"contributing.html":{}}}],["skipifsame",{"_index":291,"title":{},"body":{"classes/Repository.html":{}}}],["small",{"_index":642,"title":{},"body":{"contributing.html":{}}}],["smooth",{"_index":385,"title":{},"body":{"contributing.html":{}}}],["software",{"_index":750,"title":{},"body":{"index.html":{},"license.html":{}}}],["solved",{"_index":520,"title":{},"body":{"contributing.html":{}}}],["someone",{"_index":572,"title":{},"body":{"contributing.html":{}}}],["soon",{"_index":469,"title":{},"body":{"contributing.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"index.html":{}}}],["stack",{"_index":525,"title":{},"body":{"contributing.html":{}}}],["stack/forms",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["star",{"_index":401,"title":{},"body":{"contributing.html":{}}}],["started",{"_index":351,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["staticmethods",{"_index":111,"title":{},"body":{"injectables/EntityManager.html":{}}}],["step",{"_index":655,"title":{},"body":{"contributing.html":{}}}],["steps",{"_index":500,"title":{},"body":{"contributing.html":{}}}],["still",{"_index":444,"title":{},"body":{"contributing.html":{}}}],["storage",{"_index":184,"title":{},"body":{"injectables/EntityManager.html":{}}}],["string",{"_index":68,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["strong",{"_index":633,"title":{},"body":{"contributing.html":{}}}],["styleguides",{"_index":421,"title":{},"body":{"contributing.html":{}}}],["subject",{"_index":785,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":778,"title":{},"body":{"license.html":{}}}],["submit",{"_index":549,"title":{},"body":{"contributing.html":{}}}],["submitting",{"_index":482,"title":{},"body":{"contributing.html":{}}}],["subset",{"_index":643,"title":{},"body":{"contributing.html":{}}}],["substantial",{"_index":790,"title":{},"body":{"license.html":{}}}],["success",{"_index":66,"title":{},"body":{"injectables/ACL.html":{}}}],["such",{"_index":604,"title":{},"body":{"contributing.html":{}}}],["suggested",{"_index":624,"title":{},"body":{"contributing.html":{}}}],["suggesting",{"_index":417,"title":{},"body":{"contributing.html":{}}}],["suggestion",{"_index":611,"title":{},"body":{"contributing.html":{}}}],["suggestions",{"_index":619,"title":{},"body":{"contributing.html":{}}}],["suitable",{"_index":442,"title":{},"body":{"contributing.html":{}}}],["support",{"_index":396,"title":{},"body":{"contributing.html":{}}}],["sure",{"_index":375,"title":{},"body":{"contributing.html":{}}}],["switchmap",{"_index":144,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["switchmap((attachment",{"_index":332,"title":{},"body":{"classes/Repository.html":{}}}],["switchmap((attachments",{"_index":337,"title":{},"body":{"classes/Repository.html":{}}}],["switchmap((db",{"_index":167,"title":{},"body":{"injectables/EntityManager.html":{}}}],["switchmap((doc",{"_index":325,"title":{},"body":{"classes/Repository.html":{}}}],["switchmap((haspermission",{"_index":345,"title":{},"body":{"classes/Repository.html":{}}}],["switchmap((shouldinsert",{"_index":218,"title":{},"body":{"injectables/EntityManager.html":{}}}],["table",{"_index":365,"title":{},"body":{"contributing.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":597,"title":{},"body":{"contributing.html":{}}}],["tags",{"_index":603,"title":{},"body":{"contributing.html":{}}}],["take",{"_index":467,"title":{},"body":{"contributing.html":{}}}],["taking",{"_index":357,"title":{},"body":{"contributing.html":{}}}],["talk",{"_index":566,"title":{},"body":{"contributing.html":{}}}],["tap",{"_index":145,"title":{},"body":{"injectables/EntityManager.html":{}}}],["tap((db",{"_index":169,"title":{},"body":{"injectables/EntityManager.html":{}}}],["target",{"_index":71,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["targeting",{"_index":644,"title":{},"body":{"contributing.html":{}}}],["team",{"_index":425,"title":{},"body":{"contributing.html":{}}}],["tell",{"_index":409,"title":{},"body":{"contributing.html":{}}}],["test",{"_index":582,"title":{},"body":{"contributing.html":{}}}],["thanks",{"_index":356,"title":{},"body":{"contributing.html":{}}}],["that's",{"_index":393,"title":{},"body":{"contributing.html":{}}}],["therefore",{"_index":493,"title":{},"body":{"contributing.html":{}}}],["this._dbinstance",{"_index":174,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this._dbinstance.collections",{"_index":178,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.acl",{"_index":182,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["this.acl.initialize(db.applicationpermissions",{"_index":170,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.addbasecollections(db",{"_index":168,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.addinitialdata(db",{"_index":171,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.appid",{"_index":342,"title":{},"body":{"classes/Repository.html":{}}}],["this.basecollections.reduce",{"_index":188,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.collection",{"_index":61,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["this.collection.find(query",{"_index":318,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.find(query).exec",{"_index":315,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.find(query).remove",{"_index":324,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.find(where).update(update",{"_index":323,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.findone",{"_index":74,"title":{},"body":{"injectables/ACL.html":{}}}],["this.collection.findone(query).exec",{"_index":314,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.insert(doc",{"_index":308,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.name",{"_index":344,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.upsert(doc",{"_index":311,"title":{},"body":{"classes/Repository.html":{}}}],["this.createdatabase(name",{"_index":165,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.entitymanager.isdatabasecreated",{"_index":248,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["this.initialdata.map((data",{"_index":207,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.initialize$.next",{"_index":172,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.isinitialized",{"_index":56,"title":{},"body":{"injectables/ACL.html":{}}}],["this.observe(query).pipe",{"_index":319,"title":{},"body":{"classes/Repository.html":{}}}],["this.requestpermission(permissionmode.read).pipe",{"_index":313,"title":{},"body":{"classes/Repository.html":{}}}],["this.requestpermission(permissionmode.write).pipe",{"_index":307,"title":{},"body":{"classes/Repository.html":{}}}],["this.router.navigate([this.failureredirectto",{"_index":249,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["those",{"_index":593,"title":{},"body":{"contributing.html":{}}}],["through",{"_index":609,"title":{},"body":{"contributing.html":{}}}],["throwerror",{"_index":50,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["time",{"_index":358,"title":{},"body":{"contributing.html":{}}}],["title",{"_index":653,"title":{},"body":{"contributing.html":{}}}],["tool",{"_index":666,"title":{},"body":{"contributing.html":{}}}],["tort",{"_index":809,"title":{},"body":{"license.html":{}}}],["trace",{"_index":530,"title":{},"body":{"contributing.html":{}}}],["traceback",{"_index":531,"title":{},"body":{"contributing.html":{}}}],["track",{"_index":560,"title":{},"body":{"contributing.html":{}}}],["tracked",{"_index":650,"title":{},"body":{"contributing.html":{}}}],["tracker",{"_index":523,"title":{},"body":{"contributing.html":{}}}],["true",{"_index":62,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["try",{"_index":590,"title":{},"body":{"contributing.html":{}}}],["tslib",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["tweet",{"_index":402,"title":{},"body":{"contributing.html":{}}}],["type",{"_index":19,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":819,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":360,"title":{},"body":{"contributing.html":{}}}],["typescript",{"_index":742,"title":{},"body":{"index.html":{}}}],["unacceptable",{"_index":432,"title":{},"body":{"contributing.html":{}}}],["undefined",{"_index":173,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["under",{"_index":480,"title":{},"body":{"contributing.html":{}}}],["understand",{"_index":618,"title":{},"body":{"contributing.html":{}}}],["unknown",{"_index":179,"title":{},"body":{"injectables/EntityManager.html":{}}}],["until",{"_index":599,"title":{},"body":{"contributing.html":{}}}],["up",{"_index":490,"title":{},"body":{"contributing.html":{}}}],["update",{"_index":267,"title":{},"body":{"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["update(where",{"_index":299,"title":{},"body":{"classes/Repository.html":{}}}],["uphold",{"_index":430,"title":{},"body":{"contributing.html":{}}}],["upsert",{"_index":164,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["upsert(doc",{"_index":301,"title":{},"body":{"classes/Repository.html":{}}}],["use",{"_index":559,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["useful",{"_index":640,"title":{},"body":{"contributing.html":{}}}],["userapplications",{"_index":222,"title":{},"body":{"injectables/EntityManager.html":{}}}],["users",{"_index":517,"title":{},"body":{"contributing.html":{}}}],["using",{"_index":505,"title":{},"body":{"contributing.html":{}}}],["usually",{"_index":575,"title":{},"body":{"contributing.html":{}}}],["uuid",{"_index":148,"title":{},"body":{"injectables/EntityManager.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":147,"title":{},"body":{"injectables/EntityManager.html":{}}}],["v4",{"_index":146,"title":{},"body":{"injectables/EntityManager.html":{}}}],["value",{"_index":37,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"miscellaneous/variables.html":{}}}],["valued",{"_index":363,"title":{},"body":{"contributing.html":{}}}],["variable",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":822,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":507,"title":{},"body":{"contributing.html":{}}}],["versions",{"_index":461,"title":{},"body":{"contributing.html":{}}}],["very",{"_index":399,"title":{},"body":{"contributing.html":{}}}],["void",{"_index":31,"title":{},"body":{"injectables/ACL.html":{}}}],["vulnerabilities",{"_index":553,"title":{},"body":{"contributing.html":{}}}],["want",{"_index":414,"title":{},"body":{"contributing.html":{}}}],["warranties",{"_index":795,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":792,"title":{},"body":{"license.html":{}}}],["way",{"_index":592,"title":{},"body":{"contributing.html":{}}}],["ways",{"_index":368,"title":{},"body":{"contributing.html":{}}}],["website",{"_index":757,"title":{},"body":{"index.html":{}}}],["well",{"_index":602,"title":{},"body":{"contributing.html":{}}}],["whether",{"_index":565,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["windows",{"_index":533,"title":{},"body":{"contributing.html":{}}}],["without",{"_index":771,"title":{},"body":{"license.html":{}}}],["work",{"_index":659,"title":{},"body":{"contributing.html":{}}}],["write",{"_index":447,"title":{},"body":{"contributing.html":{}}}],["writing",{"_index":647,"title":{},"body":{"contributing.html":{}}}],["x86",{"_index":536,"title":{},"body":{"contributing.html":{}}}],["yes",{"_index":272,"title":{},"body":{"classes/Repository.html":{}}}],["you're",{"_index":458,"title":{},"body":{"contributing.html":{}}}],["zone.js",{"_index":740,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/ACL.html":{"url":"injectables/ACL.html","title":"injectable - ACL","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ACL\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/persistence/src/lib/services/acl.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                collection\n                            \n                            \n                                    Private\n                                isInitialized\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasPermission\n                            \n                            \n                                initialize\n                            \n                            \n                                requestPermissions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasPermission\n                        \n                    \n                \n            \n            \n                \nhasPermission(permission: literal type)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/acl.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    permission\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initialize\n                        \n                    \n                \n            \n            \n                \ninitialize(collection: ApplicationPermissionsCollection)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/acl.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n                                    \n                                            ApplicationPermissionsCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestPermissions\n                        \n                    \n                \n            \n            \n                \nrequestPermissions(permissions: Permission[])\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/acl.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    permissions\n                                    \n                                            Permission[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationPermissionsCollection\n\n                    \n                \n                    \n                        \n                                Defined in libs/persistence/src/lib/services/acl.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isInitialized\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/persistence/src/lib/services/acl.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ApplicationPermissionsCollection } from '@central-factory/permissions/collections/application-permissions.collection';\nimport {\n  Permission,\n  PermissionKind,\n  PermissionMode,\n} from '@central-factory/permissions/models/permission';\nimport { defer, from, map, Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ACL {\n  private collection?: ApplicationPermissionsCollection;\n\n  private isInitialized = false;\n\n  initialize(collection: ApplicationPermissionsCollection) {\n    if (this.isInitialized) {\n      console.warn('PermissionsService already initialized');\n      return;\n    }\n\n    this.collection = collection;\n    this.isInitialized = true;\n  }\n\n  requestPermissions(permissions: Permission[]): Observable {\n    return defer(() => {\n      if (!this.isInitialized || !this.collection) {\n        return throwError(\n          () => new Error('PermissionsService not initialized')\n        );\n      }\n\n      return from(this.collection.bulkInsert(permissions)).pipe(\n        map(({ success }) => !!success)\n      );\n    });\n  }\n\n  hasPermission(permission: {\n    appId: string;\n    kind: PermissionKind;\n    mode: PermissionMode;\n    target: string;\n  }): Observable {\n    return defer(() => {\n      if (!this.isInitialized || !this.collection) {\n        return throwError(\n          () => new Error('PermissionsService not initialized')\n        );\n      }\n\n      const query = this.collection.findOne({\n        selector: {\n          id: `${permission.appId}:${permission.kind}:${permission.mode}:${permission.target}`,\n        },\n      });\n\n      return from(query.exec()).pipe(map((doc) => !!doc));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EntityManager.html":{"url":"injectables/EntityManager.html","title":"injectable - EntityManager","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EntityManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/persistence/src/lib/services/entity-manager.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _dbInstance\n                            \n                            \n                                    Public\n                                initialize$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addBaseCollections\n                            \n                            \n                                    Private\n                                addInitialData\n                            \n                            \n                                    Private\n                                createDatabase\n                            \n                            \n                                    Public\n                                getRepository\n                            \n                            \n                                    Public\n                                isDatabaseCreated\n                            \n                            \n                                    Public\n                                setupDatabase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(acl: ACL, baseCollections: literal type[], initialData: literal type[])\n                    \n                \n                        \n                            \n                                Defined in libs/persistence/src/lib/services/entity-manager.ts:67\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        acl\n                                                  \n                                                        \n                                                                        ACL\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseCollections\n                                                  \n                                                        \n                                                                    literal type[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        initialData\n                                                  \n                                                        \n                                                                    literal type[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        addBaseCollections\n                        \n                    \n                \n            \n            \n                \n                    \n                    addBaseCollections(db: RxDatabase)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n                                    \n                                            RxDatabase\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        addInitialData\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInitialData(db: RxDatabase)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n                                    \n                                            RxDatabase\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createDatabase\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDatabase(name: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getRepository\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRepository(collectionName, appId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:98\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        RxDocumentType\n                        OrmMethods\n                        StaticMethods\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    appId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isDatabaseCreated\n                        \n                    \n                \n            \n            \n                \n                    \n                    isDatabaseCreated()\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setupDatabase\n                        \n                    \n                \n            \n            \n                \n                    \n                    setupDatabase(name: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _dbInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RxDatabase\n\n                    \n                \n                    \n                        \n                                Defined in libs/persistence/src/lib/services/entity-manager.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initialize$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ReplaySubject(0)\n                    \n                \n                    \n                        \n                                Defined in libs/persistence/src/lib/services/entity-manager.ts:65\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport * as PouchdbAdapterIdb from 'pouchdb-adapter-idb';\nimport {\n  addRxPlugin,\n  createRxDatabase,\n  RxCollection,\n  RxCollectionCreator,\n  RxDatabase,\n} from 'rxdb/plugins/core';\nimport { RxDBDevModePlugin } from 'rxdb/plugins/dev-mode';\nimport { RxDBEncryptionPlugin } from 'rxdb/plugins/encryption';\nimport { addPouchPlugin, getRxStoragePouch } from 'rxdb/plugins/pouchdb';\nimport { RxDBQueryBuilderPlugin } from 'rxdb/plugins/query-builder';\nimport { RxDBValidatePlugin } from 'rxdb/plugins/validate';\nimport {\n  defer,\n  forkJoin,\n  from,\n  map,\n  Observable,\n  of,\n  ReplaySubject,\n  switchMap,\n  tap,\n  throwError,\n} from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ACL } from './acl';\nimport { Repository } from './repository';\n\naddPouchPlugin(PouchdbAdapterIdb);\naddRxPlugin(RxDBDevModePlugin);\naddRxPlugin(RxDBValidatePlugin);\naddRxPlugin(RxDBEncryptionPlugin);\naddRxPlugin(RxDBQueryBuilderPlugin);\n\nexport const ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN = new InjectionToken('ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN');\n\nexport const ENTITY_MANAGER_INITIAL_DATA_TOKEN = new InjectionToken('ENTITY_MANAGER_INITIAL_DATA_TOKEN');\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EntityManager {\n  public initialize$ = new ReplaySubject(0);\n\n  private _dbInstance?: RxDatabase;\n\n  constructor(\n    private readonly acl: ACL,\n    @Inject(ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN)\n    private readonly baseCollections: {\n      name: string;\n      creator: RxCollectionCreator;\n    }[],\n    @Inject(ENTITY_MANAGER_INITIAL_DATA_TOKEN)\n    private readonly initialData: {\n      name: string;\n      data: any[];\n      upsert?: boolean;\n    }[]\n  ) {}\n\n  public setupDatabase(name: string, password: string): Observable {\n    return this.createDatabase(name, password).pipe(\n      switchMap((db) => this.addBaseCollections(db)),\n      tap((db) => this.acl.initialize(db.applicationpermissions)),\n      switchMap((db) => this.addInitialData(db)),\n      tap(() => this.initialize$.next()),\n      map(() => undefined)\n    );\n  }\n\n  public isDatabaseCreated() {\n    return this._dbInstance !== undefined;\n  }\n\n  public getRepository(\n    collectionName: keyof DatabaseCollections,\n    appId: string\n  ): Observable> {\n    if (!this._dbInstance) {\n      return throwError(() => new Error('Database not initialized'));\n    }\n\n    const collection = this._dbInstance.collections[\n      collectionName\n    ] as unknown as RxCollection;\n\n    if (!collection) {\n      return throwError(() => new Error('Collection not initialized'));\n    }\n\n    const repository = new Repository(appId, collection, this.acl);\n\n    return of(repository);\n  }\n\n  private createDatabase(\n    name: string,\n    password: string\n  ): Observable> {\n    return defer(() =>\n      from(\n        createRxDatabase>({\n          name,\n          password,\n          storage: getRxStoragePouch('idb'),\n        })\n      ).pipe(tap((db) => (this._dbInstance = db)))\n    );\n  }\n\n  private addBaseCollections(\n    db: RxDatabase\n  ): Observable> {\n    const baseCollections: {\n      [key: string]: RxCollectionCreator;\n    } = this.baseCollections.reduce(\n      (result, current) =>\n        Object.assign(result, { [current.name]: current.creator }),\n      {}\n    );\n\n    return defer(() =>\n      from(\n        db.addCollections(baseCollections) as unknown as Promise\n        >\n      ).pipe(\n        tap((db) => {\n          Object.values(db).forEach((collection) => {\n            collection.preInsert((data: any) => {\n              const now = new Date().toISOString();\n              data.id = data.id || uuidv4();\n              data.createdAt = data.createdAt || now;\n              data.updatedAt = data.updatedAt || now;\n            }, false);\n            collection.preSave((data: any, document: any) => {\n              const now = new Date().toISOString();\n              data.createdAt = document.createdAt || now;\n              data.updatedAt = now;\n            }, false);\n          });\n        })\n      )\n    );\n  }\n\n  private addInitialData(db: RxDatabase): Observable {\n    return forkJoin(\n      this.initialData.map((data) => {\n        const collection = db[data.name];\n        const upsert = 'upsert' in data ? data.upsert : true;\n\n        return forkJoin(\n          data.data.map((doc) => {\n            const shouldInsert$ = upsert\n              ? of(true)\n              : from(\n                  collection.findOne({ selector: { id: doc.id } }).exec()\n                ).pipe(map((result) => !result));\n\n            return shouldInsert$.pipe(\n              switchMap((shouldInsert) => {\n                if (!shouldInsert) {\n                  return of(undefined);\n                }\n\n                return from(collection.upsert(doc)).pipe(\n                  switchMap(() => {\n                    if (data.name !== 'userapplications') {\n                      return of(undefined);\n                    }\n\n                    const permissions = (\n                      doc.additionalProperties?.permissions || []\n                    ).map((permission: any) => ({\n                      ...permission,\n                      appId: doc.id,\n                      id: `${doc.id}:${permission.kind}:${permission.mode}:${permission.target}`,\n                    }));\n\n                    return forkJoin(\n                      permissions.map((permission: any) =>\n                        db.applicationpermissions.upsert(permission)\n                      )\n                    );\n                  })\n                );\n              })\n            );\n          })\n        );\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsDatabaseCreatedGuard.html":{"url":"guards/IsDatabaseCreatedGuard.html","title":"guard - IsDatabaseCreatedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsDatabaseCreatedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                libs/persistence/src/lib/guards/is-database-created.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(entityManager: EntityManager, router: Router, failureRedirectTo: string)\n                    \n                \n                        \n                            \n                                Defined in libs/persistence/src/lib/guards/is-database-created.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                        EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        failureRedirectTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate()\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/guards/is-database-created.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { EntityManager } from '../services/entity-manager';\n\nexport const ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN =\n  new InjectionToken(\n    'ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN',\n    {\n      providedIn: 'root',\n      factory: () => '/login',\n    }\n  );\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsDatabaseCreatedGuard implements CanActivate {\n  constructor(\n    private entityManager: EntityManager,\n    private router: Router,\n    @Inject(ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN)\n    private failureRedirectTo: string\n  ) {}\n\n  public canActivate(): boolean {\n    const isDatabaseCreated = this.entityManager.isDatabaseCreated();\n\n    if (!isDatabaseCreated) {\n      this.router.navigate([this.failureRedirectTo]);\n    }\n\n    return isDatabaseCreated;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsNotDatabaseCreatedGuard.html":{"url":"guards/IsNotDatabaseCreatedGuard.html","title":"guard - IsNotDatabaseCreatedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsNotDatabaseCreatedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                libs/persistence/src/lib/guards/is-not-database-created.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(entityManager: EntityManager, router: Router, failureRedirectTo: string)\n                    \n                \n                        \n                            \n                                Defined in libs/persistence/src/lib/guards/is-not-database-created.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                        EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        failureRedirectTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate()\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/guards/is-not-database-created.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { EntityManager } from '../services/entity-manager';\n\nexport const ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN =\n  new InjectionToken(\n    'ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN',\n    {\n      providedIn: 'root',\n      factory: () => '/',\n    }\n  );\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsNotDatabaseCreatedGuard implements CanActivate {\n  constructor(\n    private entityManager: EntityManager,\n    private router: Router,\n    @Inject(ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN)\n    private failureRedirectTo: string\n  ) {}\n\n  public canActivate(): boolean {\n    const isDatabaseCreated = this.entityManager.isDatabaseCreated();\n\n    if (isDatabaseCreated) {\n      this.router.navigate([this.failureRedirectTo]);\n    }\n\n    return !isDatabaseCreated;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Repository.html":{"url":"classes/Repository.html","title":"class - Repository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Repository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/persistence/src/lib/services/repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                find\n                            \n                            \n                                findOne\n                            \n                            \n                                getAllAttachments\n                            \n                            \n                                getAttachment\n                            \n                            \n                                insert\n                            \n                            \n                                observe\n                            \n                            \n                                observeAttachments\n                            \n                            \n                                observeOne\n                            \n                            \n                                putAttachment\n                            \n                            \n                                remove\n                            \n                            \n                                removeAttachment\n                            \n                            \n                                    Private\n                                requestPermission\n                            \n                            \n                                update\n                            \n                            \n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appId: string, collection: RxCollection, acl: ACL)\n                    \n                \n                        \n                            \n                                Defined in libs/persistence/src/lib/services/repository.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        collection\n                                                  \n                                                        \n                                                                    RxCollection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        acl\n                                                  \n                                                        \n                                                                        ACL\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllAttachments\n                        \n                    \n                \n            \n            \n                \ngetAllAttachments(docId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAttachment\n                        \n                    \n                \n            \n            \n                \ngetAttachment(docId: string, attachmentId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attachmentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert(doc: RxDocumentType)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                            RxDocumentType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observe\n                        \n                    \n                \n            \n            \n                \nobserve(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observeAttachments\n                        \n                    \n                \n            \n            \n                \nobserveAttachments(docId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:248\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observeOne\n                        \n                    \n                \n            \n            \n                \nobserveOne(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putAttachment\n                        \n                    \n                \n            \n            \n                \nputAttachment(docId: string, attachment: Attachment, skipIfSame: boolean)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    attachment\n                                    \n                                                Attachment\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    skipIfSame\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeAttachment\n                        \n                    \n                \n            \n            \n                \nremoveAttachment(docId: string, attachmentId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attachmentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        requestPermission\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestPermission(mode: PermissionMode)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:284\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mode\n                                    \n                                            PermissionMode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(where?: Query, update?: Update)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                Update\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upsert\n                        \n                    \n                \n            \n            \n                \nupsert(doc: RxDocumentType)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                            RxDocumentType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  PermissionKind,\n  PermissionMode,\n} from '@central-factory/permissions/models/permission';\nimport {\n  BlobBuffer,\n  DeepReadonly,\n  MangoQuery,\n  RxCollection,\n} from 'rxdb/dist/types/types';\nimport {\n  forkJoin,\n  from,\n  map,\n  Observable,\n  of,\n  switchMap,\n  throwError,\n} from 'rxjs';\nimport { ACL } from './acl';\n\nexport type Query = MangoQuery | undefined;\nexport type Update = any;\n\nexport type Attachment = {\n  id: string;\n  data: BlobBuffer;\n  type: string;\n};\n\nexport class Repository {\n  constructor(\n    private readonly appId: string,\n    private readonly collection: RxCollection,\n    private readonly acl: ACL\n  ) {}\n\n  insert(doc: RxDocumentType): Observable> {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() => this.collection.insert(doc)),\n      map((doc) => doc.toJSON())\n    );\n  }\n\n  upsert(doc: RxDocumentType): Observable> {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() => this.collection.upsert(doc)),\n      map((doc) => doc.toJSON())\n    );\n  }\n\n  findOne(\n    query?: Query\n  ): Observable | null> {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() => this.collection.findOne(query).exec()),\n      map((doc) => (doc ? doc.toJSON() : null))\n    );\n  }\n\n  find(\n    query?: Query\n  ): Observable[]> {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() => this.collection.find(query).exec()),\n      map((docs) => docs.map((doc) => doc.toJSON()))\n    );\n  }\n\n  observe(\n    query?: Query\n  ): Observable[]> {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() => this.collection.find(query).$),\n      map((docs) => docs.map((doc) => doc.toJSON()))\n    );\n  }\n\n  observeOne(\n    query?: Query\n  ): Observable | null> {\n    return this.observe(query).pipe(\n      map((docs) => (docs.length > 0 ? docs[0] : null))\n    );\n  }\n\n  update(\n    where?: Query,\n    update?: Update\n  ): Observable[]> {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() => this.collection.find(where).update(update)),\n      map((docs) => docs.map((doc) => doc.toJSON()))\n    );\n  }\n\n  remove(\n    query?: Query\n  ): Observable[]> {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() => this.collection.find(query).remove()),\n      map((docs) => docs.map((doc) => doc.toJSON()))\n    );\n  }\n\n  putAttachment(\n    docId: string,\n    attachment: Attachment,\n    skipIfSame: boolean = false\n  ): Observable {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        return doc.putAttachment(attachment, skipIfSame);\n      }),\n      map((attachment) => attachment.id)\n    );\n  }\n\n  getAttachment(docId: string, attachmentId: string): Observable {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        return of(doc.getAttachment(attachmentId));\n      }),\n      switchMap((attachment) => {\n        if (!attachment) {\n          return throwError(\n            () => new Error('No attachment found for id ' + attachmentId)\n          );\n        }\n\n        return from(attachment.getData()).pipe(\n          map((data) => ({\n            id: attachment.id,\n            data,\n            type: attachment.type,\n          }))\n        );\n      })\n    );\n  }\n\n  getAllAttachments(docId: string): Observable {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        return of(doc.allAttachments());\n      }),\n      switchMap((attachments) => {\n        return forkJoin(\n          attachments.map((attachment) =>\n            from(attachment.getData()).pipe(\n              map((data) => ({\n                id: attachment.id,\n                data,\n                type: attachment.type,\n              }))\n            )\n          )\n        );\n      })\n    );\n  }\n\n  removeAttachment(docId: string, attachmentId: string): Observable {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        const attachment = doc.getAttachment(attachmentId);\n\n        if (!attachment) {\n          return throwError(\n            () => new Error('No attachment found for id ' + attachmentId)\n          );\n        }\n\n        return attachment.remove();\n      })\n    );\n  }\n\n  observeAttachments(docId: string): Observable {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        return doc.allAttachments$;\n      }),\n      switchMap((attachments) => {\n        return forkJoin(\n          attachments.map((attachment) =>\n            from(attachment.getData()).pipe(\n              map((data) => ({\n                id: attachment.id,\n                data,\n                type: attachment.type,\n              }))\n            )\n          )\n        );\n      })\n    );\n  }\n\n  private requestPermission(mode: PermissionMode): Observable {\n    return this.acl\n      .hasPermission({\n        appId: this.appId,\n        kind: PermissionKind.Collection,\n        mode,\n        target: this.collection.name,\n      })\n      .pipe(\n        switchMap((hasPermission) => {\n          if (!hasPermission) {\n            return throwError(\n              () =>\n                new Error(\n                  `No permission to perform action ${mode} on ${this.collection.name} with appId ${this.appId}`\n                )\n            );\n          }\n\n          return of(hasPermission);\n        })\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\n\nContributing to The Central Factory's Metaverse\nFirst off, thanks for taking the time to contribute! ❤️\nAll types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. 🎉\n\nAnd if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:\n\nStar the project\nTweet about it\nRefer this project in your project's readme\nMention the project at local meetups and tell your friends/colleagues\n\n\n\nTable of Contents\n\nCode of Conduct\nI Have a Question\nI Want To Contribute\nReporting Bugs\nSuggesting Enhancements\nYour First Code Contribution\nImproving The Documentation\n\n\nStyleguides\nCommit Messages\n\n\nJoin The Project Team\n\nCode of Conduct\nThis project and everyone participating in it is governed by the\nThe Central Factory's Metaverse Code of Conduct.\nBy participating, you are expected to uphold this code. Please report unacceptable behavior\nto <>.\nI Have a Question\n\nIf you want to ask a question, we assume that you have read the available Documentation.\n\nBefore you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.\nIf you then still feel the need to ask a question and need clarification, we recommend the following:\n\nOpen an Issue.\nProvide as much context as you can about what you're running into.\nProvide project and platform versions (nodejs, npm, etc), depending on what seems relevant.\n\nWe will then take care of the issue as soon as possible.\n\n\nI Want To Contribute\n\nLegal Notice \nWhen contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.\n\nReporting Bugs\n\nBefore Submitting a Bug Report\nA good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.\n\nMake sure that you are using the latest version.\nDetermine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the documentation. If you are looking for support, you might want to check this section).\nTo see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker.\nAlso make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.\nCollect information about the bug:\nStack trace (Traceback)\nOS, Platform and Version (Windows, Linux, macOS, x86, ARM)\nVersion of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.\nPossibly your input and the output\nCan you reliably reproduce the issue? And can you also reproduce it with older versions?\n\n\n\n\nHow Do I Submit a Good Bug Report?\n\nYou must never report security related issues, vulnerabilities or bugs to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to <>.\n\n\n\nWe use GitHub issues to track bugs and errors. If you run into an issue with the project:\n\nOpen an Issue. (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)\nExplain the behavior you would expect and the actual behavior.\nPlease provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.\nProvide the information you collected in the previous section.\n\nOnce it's filed:\n\nThe project team will label the issue accordingly.\nA team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as needs-repro. Bugs with the needs-repro tag will not be addressed until they are reproduced.\nIf the team is able to reproduce the issue, it will be marked needs-fix, as well as possibly other tags (such as critical), and the issue will be left to be implemented by someone.\n\n\n\n\nSuggesting Enhancements\nThis section guides you through submitting an enhancement suggestion for The Central Factory's Metaverse, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.\n\nBefore Submitting an Enhancement\n\nMake sure that you are using the latest version.\nRead the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration.\nPerform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.\nFind out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.\n\n\nHow Do I Submit a Good Enhancement Suggestion?\nEnhancement suggestions are tracked as GitHub issues.\n\nUse a clear and descriptive title for the issue to identify the suggestion.\nProvide a step-by-step description of the suggested enhancement in as many details as possible.\nDescribe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you.\nYou may want to include screenshots and animated GIFs which help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. \nExplain why this enhancement would be useful to most The Central Factory's Metaverse users. You may also want to point out the other projects that solved it better and which could serve as inspiration.\n\n\n\nYour First Code Contribution\n\n\nImproving The Documentation\n\n\nStyleguides\nCommit Messages\n\n\nJoin The Project Team\n\n\n\nAttribution\nThis guide is based on the contributing-gen. Make your own!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                libs/persistence/src/lib/guards/is-database-created.guard.ts\n            \n            guard\n            IsDatabaseCreatedGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/guards/is-database-created.guard.ts\n            \n            variable\n            ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/guards/is-not-database-created.guard.ts\n            \n            guard\n            IsNotDatabaseCreatedGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/guards/is-not-database-created.guard.ts\n            \n            variable\n            ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/acl.ts\n            \n            injectable\n            ACL\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/entity-manager.ts\n            \n            injectable\n            EntityManager\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/entity-manager.ts\n            \n            variable\n            ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/entity-manager.ts\n            \n            variable\n            ENTITY_MANAGER_INITIAL_DATA_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/repository.ts\n            \n            class\n            Repository\n            \n                0 %\n                (0/16)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^12.2.0\n        \n            @angular/cdk : ^13.0.2\n        \n            @angular/common : ^12.2.0\n        \n            @angular/compiler : ^12.2.0\n        \n            @angular/core : ^12.2.0\n        \n            @angular/flex-layout : ^12.0.0-beta.35\n        \n            @angular/forms : ^12.2.0\n        \n            @angular/platform-browser : ^12.2.0\n        \n            @angular/platform-browser-dynamic : ^12.2.0\n        \n            @angular/router : ^12.2.0\n        \n            @docusaurus/core : ^2.0.0-alpha.70\n        \n            @docusaurus/preset-classic : ^2.0.0-alpha.70\n        \n            @mdi/svg : ^6.4.95\n        \n            @mdx-js/react : ^1.6.21\n        \n            @nestjs/common : ^8.2.4\n        \n            @nestjs/core : ^8.2.4\n        \n            @nestjs/platform-express : ^8.2.4\n        \n            @ng-select/ng-select : ^8.1.1\n        \n            @ng-stack/forms : ^2.4.0\n        \n            @nrwl/angular : 13.1.3\n        \n            clsx : ^1.1.1\n        \n            faker : ^5.5.3\n        \n            pouchdb-adapter-idb : ^7.2.2\n        \n            react : ^16.8.4\n        \n            react-dom : ^16.8.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rxdb : ^10.5.4\n        \n            rxjs : ~7.5.1\n        \n            tslib : ^2.0.0\n        \n            uuid : ^8.3.2\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nThe Central Factory's Metaverse\nTypeScript Open Source packages for the Metaverse.\nThis code includes The Central Factory's Metaverse Core packages and Community Editions.\nProperty of The Central Factory Foundation. MIT Licensed software\nDevelopment\nServe apps\n# run the portal app\nnx serve portal\n# run the codex website\nnx serve codex\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Central Factory\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Attachment   (libs/.../repository.ts)\n                        \n                        \n                            Query   (libs/.../repository.ts)\n                        \n                        \n                            Update   (libs/.../repository.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/persistence/src/lib/services/repository.ts\n    \n    \n        \n            \n                \n                    \n                    Attachment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Query\n                \n            \n            \n                \n                            MangoQuery | undefined\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Update\n                \n            \n            \n                \n                            any\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN   (libs/.../entity-manager.ts)\n                        \n                        \n                            ENTITY_MANAGER_INITIAL_DATA_TOKEN   (libs/.../entity-manager.ts)\n                        \n                        \n                            ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN   (libs/.../is-database-created.guard.ts)\n                        \n                        \n                            ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN   (libs/.../is-not-database-created.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/persistence/src/lib/services/entity-manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENTITY_MANAGER_INITIAL_DATA_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('ENTITY_MANAGER_INITIAL_DATA_TOKEN')\n                    \n                \n\n\n        \n    \n\n    libs/persistence/src/lib/guards/is-database-created.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n    'ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN',\n    {\n      providedIn: 'root',\n      factory: () => '/login',\n    }\n  )\n                    \n                \n\n\n        \n    \n\n    libs/persistence/src/lib/guards/is-not-database-created.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n    'ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN',\n    {\n      providedIn: 'root',\n      factory: () => '/',\n    }\n  )\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
