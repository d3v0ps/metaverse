var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/ACL.html",[0,0.747,1,1.081]],["body/injectables/ACL.html",[0,0.944,1,1.367,2,1.436,3,0.99,4,0.825,5,0.825,6,1.768,7,0.561,8,2.441,9,1.832,10,1.772,11,2.57,12,3.593,13,1.367,14,2.441,15,2.441,16,3.137,17,3.137,18,1.983,19,1.266,20,1.772,21,2.272,22,1.566,23,0.073,24,1.566,25,2.126,26,1.566,27,2.57,28,3.137,29,4.204,30,2.272,31,2.272,32,3.137,33,2.272,34,1.768,35,2.272,36,1.188,37,1.188,38,1.983,39,2.272,40,1.688,41,0.99,42,3.137,43,3.137,44,3.137,45,3.137,46,3.137,47,3.137,48,3.137,49,1.367,50,2.272,51,2.272,52,2.441,53,2.441,54,1.768,55,2.796,56,1.983,57,2.271,58,1.188,59,0.99,60,0.825,61,0.825,62,0.561,63,3.875,64,1.878,65,2.796,66,1.768,67,0.774,68,3.137,69,2.441,70,2.272,71,3.137,72,1.436,73,1.367,74,1.436,75,1.188,76,1.768,77,0.99,78,1.436,79,2.272,80,1.436,81,1.436,82,2.272,83,2.272,84,1.768,85,0.046,86,0.046]],["title/injectables/EntityManager.html",[0,0.747,87,1.081]],["body/injectables/EntityManager.html",[0,0.637,1,1.579,2,0.845,3,0.583,4,0.486,5,0.486,7,0.33,8,1.647,9,1.861,10,1.637,11,1.887,13,0.922,15,2.043,18,1.887,19,1.237,20,1.685,22,1.579,23,0.073,24,1.791,25,0.699,26,1.507,27,2.554,34,1.041,36,0.699,37,0.699,38,1.337,40,1.841,41,0.583,55,2.043,56,1.337,57,1.659,58,0.699,59,0.583,60,0.486,61,0.954,62,0.33,64,1.861,66,1.041,67,0.954,69,1.647,72,1.887,73,1.911,75,0.699,77,1.761,80,0.845,81,1.337,85,0.031,86,0.031,87,0.922,88,2.504,89,0.845,90,2.626,91,2.149,92,2.626,93,2.116,94,2.626,95,2.626,96,1.887,97,2.116,98,1.106,99,1.337,100,2.985,101,2.626,102,2.116,103,1.337,104,3.868,105,1.337,106,2.985,107,2.116,108,1.337,109,1.337,110,3.623,111,1.337,112,1.337,113,1.337,114,1.041,115,1.337,116,1.337,117,2.626,118,1.337,119,1.106,120,2.116,121,1.337,122,2.116,123,1.337,124,0.845,125,0.699,126,1.337,127,1.041,128,1.041,129,1.041,130,1.337,131,1.337,132,1.337,133,2.116,134,1.647,135,2.626,136,1.337,137,1.337,138,1.337,139,1.337,140,1.337,141,1.337,142,1.337,143,1.337,144,1.337,145,1.337,146,1.337,147,1.337,148,1.337,149,1.337,150,1.337,151,2.323,152,1.337,153,1.647,154,2.116,155,1.337,156,2.116,157,1.041,158,1.373,159,1.337,160,1.337,161,1.337,162,1.337,163,1.337,164,1.337,165,1.337,166,0.845,167,1.041,168,0.845,169,1.041,170,2.043,171,1.337,172,1.337,173,1.337,174,1.647,175,2.323,176,1.337,177,1.337,178,2.116,179,1.337,180,2.116,181,1.337,182,1.337,183,1.337,184,1.337,185,2.626,186,1.337,187,1.337,188,1.337,189,1.337,190,2.116,191,1.337,192,1.337,193,1.041,194,1.337,195,1.337,196,1.337,197,1.337,198,1.337,199,1.337,200,1.647,201,1.041,202,1.337,203,1.337,204,1.337,205,1.337,206,1.337,207,1.041,208,1.337,209,1.337,210,3.459,211,2.116,212,2.116,213,2.626,214,2.626,215,1.337,216,1.041,217,1.337,218,1.337,219,1.337,220,1.337,221,1.337,222,2.116,223,1.337,224,1.337,225,2.116,226,1.041,227,1.337,228,1.337,229,1.337,230,2.626,231,1.337,232,1.337,233,1.337,234,1.337,235,1.337,236,1.337,237,1.337,238,1.337,239,1.337]],["title/guards/IsDatabaseCreatedGuard.html",[240,1.569,241,1.569]],["body/guards/IsDatabaseCreatedGuard.html",[0,1.095,3,1.236,4,1.03,5,1.03,7,0.7,9,1.749,10,1.236,13,1.585,19,0.854,20,1.585,22,1.236,23,0.072,24,1.236,26,1.236,40,1.749,41,1.236,59,1.585,60,1.321,61,1.321,62,0.7,64,1.236,67,0.7,73,1.749,77,1.585,85,0.054,86,0.054,87,1.952,91,2.099,96,2.537,98,1.901,119,1.901,124,1.793,125,1.901,241,2.298,242,1.793,243,2.099,244,2.099,245,1.483,246,3.485,247,2.207,248,3.544,249,3.124,250,2.207,251,2.207,252,1.793,253,2.207,254,1.793,255,2.298,256,1.236,257,2.207,258,2.207,259,2.836,260,2.207,261,2.207]],["title/guards/IsNotDatabaseCreatedGuard.html",[240,1.569,262,1.569]],["body/guards/IsNotDatabaseCreatedGuard.html",[0,1.095,3,1.236,4,1.03,5,1.03,7,0.7,9,1.749,10,1.236,13,1.585,19,0.854,20,1.585,22,1.236,23,0.072,24,1.236,26,1.236,40,1.749,41,1.236,59,1.585,60,1.321,61,1.321,62,0.7,64,1.236,67,0.7,73,1.749,77,1.585,85,0.054,86,0.054,87,1.952,91,2.099,96,2.537,98,1.901,119,1.901,124,1.793,125,1.901,242,1.793,243,2.099,244,2.099,245,1.483,246,3.485,247,2.207,248,3.544,249,3.124,250,2.207,251,2.207,252,1.793,253,2.207,254,1.793,256,1.236,258,2.207,260,2.207,261,2.207,262,2.298,263,2.298,264,2.836]],["title/classes/Repository.html",[62,0.612,158,1.298]],["body/classes/Repository.html",[1,1.503,3,0.464,4,0.387,5,0.387,7,0.263,9,1.558,10,1.788,11,1.422,13,0.767,14,1.371,19,1.311,20,1.788,22,1.788,23,0.073,24,1.788,25,0.557,26,1.766,27,2.835,36,0.557,37,0.557,38,1.113,40,1.139,49,0.464,52,0.829,53,2.034,54,0.829,56,0.674,57,2.26,58,0.557,61,0.949,62,0.263,64,1.969,65,2.252,67,0.851,72,1.652,73,1.929,74,0.674,75,1.177,76,0.829,77,0.767,78,2.769,80,1.829,81,2.593,84,2.939,85,0.026,86,0.026,98,0.921,114,2.683,119,1.177,134,2.034,151,1.371,153,3.059,158,0.921,170,1.751,174,2.034,175,1.371,184,0.674,193,0.829,200,1.371,207,0.829,216,2.252,226,2.252,265,1.066,266,0.674,267,2.251,268,1.371,269,3.298,270,1.761,271,1.761,272,1.761,273,1.761,274,1.761,275,1.761,276,2.251,277,1.371,278,1.761,279,1.761,280,2.866,281,1.066,282,1.066,283,1.066,284,2.614,285,1.066,286,1.761,287,1.066,288,3.298,289,1.761,290,1.066,291,1.761,292,1.066,293,4.103,294,1.761,295,3.448,296,1.066,297,1.761,298,1.066,299,1.761,300,1.066,301,1.761,302,1.066,303,1.761,304,1.066,305,1.066,306,3.003,307,2.614,308,1.066,309,1.761,310,1.066,311,1.761,312,1.066,313,1.761,314,1.066,315,1.066,316,1.066,317,1.761,318,1.066,319,1.761,320,1.371,321,1.066,322,3.117,323,1.066,324,2.251,325,3.298,326,1.066,327,3.117,328,1.066,329,1.761,330,1.066,331,2.894,332,2.614,333,1.066,334,1.066,335,1.066,336,0.829,337,1.066,338,1.066,339,1.066,340,2.894,341,3.298,342,2.566,343,1.066,344,1.066,345,2.614,346,1.066,347,1.066,348,2.251,349,2.251,350,2.251,351,1.066,352,1.761,353,1.066,354,1.066,355,1.066,356,1.066,357,1.066,358,1.761,359,1.066,360,1.761,361,1.066,362,0.829,363,0.829,364,0.829,365,1.066,366,1.066,367,1.066,368,1.066]],["title/contributing.html",[369,1.328,370,1.328,371,1.634]],["body/contributing.html",[23,0.051,49,1.296,67,0.519,85,0.031,86,0.031,91,0.695,201,1.034,254,0.84,268,2.035,342,1.034,362,1.639,363,1.034,371,2.035,372,2.315,373,2.315,374,2.975,375,1.329,376,1.329,377,2.106,378,3.242,379,1.329,380,2.106,381,1.329,382,1.329,383,3.242,384,1.639,385,2.106,386,1.329,387,2.106,388,3.242,389,2.106,390,4.266,391,1.329,392,2.975,393,2.917,394,2.684,395,2.975,396,2.615,397,2.975,398,2.975,399,1.329,400,2.615,401,1.329,402,1.329,403,2.106,404,1.329,405,2.523,406,1.329,407,1.329,408,2.035,409,1.329,410,1.329,411,1.329,412,1.329,413,1.329,414,1.329,415,2.106,416,1.329,417,1.329,418,1.329,419,1.329,420,1.329,421,1.329,422,1.329,423,2.106,424,1.329,425,1.329,426,1.329,427,1.329,428,2.106,429,1.329,430,2.812,431,2.615,432,3.449,433,3.614,434,2.106,435,3.449,436,2.106,437,2.106,438,2.106,439,2.049,440,2.106,441,2.106,442,2.106,443,2.106,444,3.449,445,1.329,446,2.106,447,1.329,448,2.106,449,1.329,450,3.614,451,1.329,452,3.242,453,3.449,454,1.329,455,1.329,456,1.329,457,2.975,458,2.975,459,2.975,460,2.615,461,1.329,462,4.468,463,2.106,464,2.035,465,2.106,466,1.329,467,1.329,468,2.106,469,1.329,470,1.329,471,1.329,472,2.035,473,1.639,474,3.242,475,2.106,476,2.106,477,1.639,478,1.034,479,1.639,480,2.106,481,1.329,482,1.034,483,1.329,484,2.106,485,2.106,486,1.329,487,1.329,488,1.329,489,2.975,490,1.329,491,1.034,492,1.329,493,1.329,494,1.329,495,2.615,496,1.329,497,1.034,498,1.639,499,1.329,500,0.84,501,2.615,502,4.165,503,2.975,504,1.329,505,1.329,506,1.329,507,1.329,508,1.329,509,2.106,510,1.329,511,2.975,512,1.329,513,1.329,514,2.106,515,2.106,516,2.615,517,1.329,518,1.329,519,3.449,520,1.329,521,1.639,522,1.329,523,1.329,524,2.615,525,2.106,526,2.975,527,1.329,528,1.329,529,1.329,530,1.329,531,1.329,532,1.639,533,1.329,534,1.329,535,2.106,536,3.242,537,1.329,538,1.329,539,2.975,540,2.106,541,1.329,542,1.329,543,2.106,544,1.639,545,2.106,546,1.329,547,1.329,548,2.615,549,1.329,550,1.329,551,1.329,552,1.329,553,1.639,554,1.639,555,2.106,556,1.329,557,1.329,558,1.329,559,1.329,560,1.329,561,1.329,562,0.84,563,2.106,564,1.329,565,1.329,566,1.329,567,3.242,568,1.329,569,2.106,570,1.329,571,1.329,572,2.615,573,1.329,574,1.329,575,2.615,576,1.329,577,1.329,578,1.329,579,2.035,580,1.329,581,1.329,582,1.034,583,1.329,584,2.975,585,1.639,586,1.329,587,2.106,588,2.615,589,1.329,590,1.329,591,2.106,592,2.106,593,1.329,594,1.329,595,1.329,596,1.034,597,1.329,598,1.329,599,1.329,600,1.329,601,1.329,602,1.329,603,1.329,604,1.329,605,1.329,606,2.106,607,1.329,608,1.329,609,1.329,610,1.329,611,1.329,612,1.034,613,1.329,614,1.329,615,2.615,616,2.106,617,1.329,618,1.329,619,1.329,620,1.329,621,1.329,622,1.329,623,1.329,624,1.329,625,1.329,626,1.329,627,1.329,628,1.329,629,1.329,630,3.614,631,3.242,632,1.329,633,2.106,634,1.329,635,1.329,636,2.106,637,1.329,638,1.329,639,2.106,640,1.329,641,1.329,642,1.329,643,1.329,644,2.106,645,2.106,646,1.329,647,1.329,648,1.329,649,1.329,650,1.329,651,1.329,652,1.329,653,1.329,654,1.329,655,1.329,656,1.329,657,1.329,658,1.329,659,1.329,660,2.106,661,1.329,662,1.329,663,1.329,664,1.329,665,1.329,666,1.329,667,1.329,668,1.329,669,1.329,670,1.329,671,1.329,672,1.329,673,1.329,674,1.329,675,2.106,676,1.329,677,1.034,678,1.329,679,1.329,680,1.329,681,1.329,682,1.329,683,2.106,684,1.329,685,1.329,686,2.615,687,1.329,688,1.329,689,1.329,690,1.034,691,1.329,692,1.329,693,1.329,694,1.329,695,1.329]],["title/coverage.html",[696,2.592]],["body/coverage.html",[0,1.168,1,1.37,5,1.142,6,2.447,19,0.947,23,0.071,62,0.776,67,0.776,85,0.057,86,0.057,87,1.37,88,2.66,89,2.66,158,1.644,166,1.987,168,1.987,240,2.452,241,1.987,243,2.298,244,2.298,245,2.298,255,1.987,262,1.987,263,1.987,266,1.987,336,3.691,384,2.447,439,1.987,696,2.447,697,3.144,698,3.144,699,3.88,700,3.42,701,4.394,702,3.144,703,3.144,704,3.144,705,3.144]],["title/dependencies.html",[562,1.328,706,2.311]],["body/dependencies.html",[23,0.073,41,1.179,58,1.415,85,0.052,86,0.052,127,2.106,128,2.106,129,2.106,157,2.106,252,1.711,706,2.106,707,3.528,708,2.707,709,2.707,710,2.707,711,2.707,712,3.528,713,2.707,714,4.618,715,2.707,716,2.707,717,2.707,718,2.707,719,3.528,720,3.528,721,2.707,722,2.707,723,3.528,724,2.707,725,2.707,726,2.746,727,2.707,728,2.707,729,3.925,730,3.528,731,2.707,732,2.707,733,2.707,734,2.707,735,2.707,736,2.707,737,2.707,738,2.707,739,2.707,740,2.707,741,2.707,742,3.925,743,2.707,744,2.707,745,2.106,746,2.707,747,2.707,748,2.707,749,2.707,750,2.707,751,2.707,752,2.707,753,2.707,754,2.707,755,2.707,756,2.707,757,2.707,758,2.707,759,2.707,760,2.707,761,2.707,762,2.707,763,2.707,764,3.528,765,2.707,766,2.707,767,2.707,768,2.707,769,2.707,770,2.707,771,2.707,772,2.707,773,2.707,774,2.707,775,2.707,776,2.707,777,2.707,778,2.707,779,2.707,780,2.707]],["title/index.html",[7,0.518,369,1.328,370,1.328]],["body/index.html",[4,1.015,23,0.069,49,1.737,60,1.015,61,1.015,75,1.461,85,0.053,86,0.053,256,1.217,277,2.174,372,2.802,373,3.101,393,2.174,394,2.174,408,2.174,430,2.174,464,2.174,473,2.174,477,2.174,478,2.174,479,2.174,482,3.276,521,2.174,532,2.174,553,3.101,554,2.802,562,2.754,582,3.471,596,2.174,612,2.174,677,2.174,690,3.101,700,2.174,726,3.39,781,2.794,782,3.601,783,2.794,784,2.794,785,2.794,786,2.794,787,2.174,788,2.794,789,2.174,790,2.794,791,2.794,792,3.601,793,3.601,794,4.461,795,2.794,796,2.794,797,2.794,798,2.794,799,2.794,800,2.794,801,2.794,802,3.601,803,2.794,804,2.794,805,2.794,806,2.794,807,2.794,808,2.794,809,2.794,810,2.794,811,2.794,812,2.794,813,2.794,814,2.794,815,2.794,816,2.794,817,2.794,818,3.985,819,3.601,820,2.794,821,2.794,822,2.794,823,3.601,824,2.794,825,2.794,826,2.794,827,2.174]],["title/license.html",[369,1.328,370,1.328,500,1.328]],["body/license.html",[23,0.056,25,1.973,49,1.31,74,1.9,85,0.056,86,0.056,256,1.31,364,2.34,405,2.34,439,1.9,472,2.34,491,2.936,497,2.34,498,2.34,500,1.9,544,2.936,579,2.936,585,2.34,745,2.34,787,2.34,789,3.663,827,2.34,828,4.124,829,3.007,830,3.007,831,3.007,832,3.007,833,3.007,834,3.007,835,3.007,836,3.007,837,3.773,838,3.007,839,3.007,840,4.124,841,3.007,842,3.007,843,3.007,844,3.007,845,3.007,846,3.007,847,3.007,848,3.007,849,3.007,850,3.773,851,3.007,852,3.007,853,3.007,854,3.007,855,3.007,856,3.007,857,3.773,858,3.007,859,3.007,860,3.007,861,3.007,862,3.007,863,3.007,864,3.007,865,3.007,866,3.007,867,3.007,868,3.007,869,3.007,870,3.007,871,3.007,872,3.007,873,3.007,874,3.007,875,3.007,876,3.007,877,3.007,878,3.007,879,3.007,880,3.007,881,3.007,882,3.007]],["title/modules.html",[883,2.592]],["body/modules.html",[23,0.064,85,0.064,86,0.064,883,2.97]],["title/overview.html",[884,2.592]],["body/overview.html",[2,2.371,23,0.063,62,0.925,85,0.063,86,0.063,242,2.371,884,2.919,885,4.31,886,3.751]],["title/miscellaneous/typealiases.html",[887,1.098,888,2.97]],["body/miscellaneous/typealiases.html",[7,0.894,18,2.291,19,1.272,23,0.066,78,2.671,85,0.062,86,0.062,184,2.291,266,2.291,280,3.289,306,3.289,320,2.821,887,1.896,889,3.626,890,4.473]],["title/miscellaneous/variables.html",[887,1.098,891,2.311]],["body/miscellaneous/variables.html",[7,0.785,23,0.072,36,2.307,37,2.307,59,1.703,60,1.42,67,1.089,85,0.058,86,0.058,88,2.012,89,2.674,125,2.044,166,2.471,167,2.477,168,2.471,169,2.477,243,2.044,244,2.307,245,2.307,255,2.674,256,1.703,257,2.477,263,2.674,887,1.664,891,2.477,892,3.909,893,3.909]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":336,"title":{},"body":{"classes/Repository.html":{},"coverage.html":{}}}],["0.1.13",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":886,"title":{},"body":{"overview.html":{}}}],["1.1.1",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["1.10.1",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["1.2.1",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["1.23.2",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["1.6.21",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["1.7.1",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":494,"title":{},"body":{"contributing.html":{}}}],["11.3.0",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["13.0.0",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["13.1.0",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["14.0.2",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["16.14.0",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["16.8.4",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":885,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":830,"title":{},"body":{"license.html":{}}}],["3.55.2",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["3.8.7",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["4755",{"_index":812,"title":{},"body":{"index.html":{}}}],["6.5.95",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["6.9.0",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["7.2.2",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["8.1.1",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["8.2.6",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["_dbinstance",{"_index":90,"title":{},"body":{"injectables/EntityManager.html":{}}}],["above",{"_index":856,"title":{},"body":{"license.html":{}}}],["accordingly",{"_index":608,"title":{},"body":{"contributing.html":{}}}],["acl",{"_index":1,"title":{"injectables/ACL.html":{}},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"coverage.html":{}}}],["action",{"_index":364,"title":{},"body":{"classes/Repository.html":{},"license.html":{}}}],["actual",{"_index":590,"title":{},"body":{"contributing.html":{}}}],["adapter",{"_index":128,"title":{},"body":{"injectables/EntityManager.html":{},"dependencies.html":{}}}],["add",{"_index":645,"title":{},"body":{"contributing.html":{}}}],["addbasecollections",{"_index":92,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addbasecollections(db",{"_index":103,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addinitialdata",{"_index":93,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addinitialdata(db",{"_index":107,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addpouchplugin",{"_index":141,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addpouchplugin(pouchdbadapteridb",{"_index":159,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addressed",{"_index":618,"title":{},"body":{"contributing.html":{}}}],["addrxplugin",{"_index":132,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbattachmentsplugin",{"_index":165,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbdevmodeplugin",{"_index":160,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbencryptionplugin",{"_index":162,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbquerybuilderplugin",{"_index":163,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbupdateplugin",{"_index":164,"title":{},"body":{"injectables/EntityManager.html":{}}}],["addrxplugin(rxdbvalidateplugin",{"_index":161,"title":{},"body":{"injectables/EntityManager.html":{}}}],["advance",{"_index":520,"title":{},"body":{"contributing.html":{}}}],["advisable",{"_index":467,"title":{},"body":{"contributing.html":{}}}],["agree",{"_index":492,"title":{},"body":{"contributing.html":{}}}],["aims",{"_index":652,"title":{},"body":{"contributing.html":{}}}],["aliases",{"_index":889,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alltroubleshooting",{"_index":808,"title":{},"body":{"index.html":{}}}],["alpha.70",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":539,"title":{},"body":{"contributing.html":{}}}],["alternatives",{"_index":678,"title":{},"body":{"contributing.html":{}}}],["and/or",{"_index":848,"title":{},"body":{"license.html":{}}}],["angular",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":41,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":252,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"dependencies.html":{}}}],["animated",{"_index":682,"title":{},"body":{"contributing.html":{}}}],["answers",{"_index":469,"title":{},"body":{"contributing.html":{}}}],["any)._attachments",{"_index":368,"title":{},"body":{"classes/Repository.html":{}}}],["app",{"_index":793,"title":{},"body":{"index.html":{}}}],["appid",{"_index":72,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["applicationpermissionscollection",{"_index":29,"title":{},"body":{"injectables/ACL.html":{}}}],["appreciation",{"_index":417,"title":{},"body":{"contributing.html":{}}}],["apps",{"_index":791,"title":{},"body":{"index.html":{}}}],["architects/module",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["arising",{"_index":880,"title":{},"body":{"license.html":{}}}],["arm",{"_index":557,"title":{},"body":{"contributing.html":{}}}],["ask",{"_index":453,"title":{},"body":{"contributing.html":{}}}],["assets:storybookrunning",{"_index":804,"title":{},"body":{"index.html":{}}}],["associated",{"_index":838,"title":{},"body":{"license.html":{}}}],["assume",{"_index":454,"title":{},"body":{"contributing.html":{}}}],["asymmetrik/ngx",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["attachment",{"_index":306,"title":{},"body":{"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["attachment.id",{"_index":345,"title":{},"body":{"classes/Repository.html":{}}}],["attachment.remove",{"_index":355,"title":{},"body":{"classes/Repository.html":{}}}],["attachment.type",{"_index":350,"title":{},"body":{"classes/Repository.html":{}}}],["attachmentid",{"_index":295,"title":{},"body":{"classes/Repository.html":{}}}],["attachments.length",{"_index":353,"title":{},"body":{"classes/Repository.html":{}}}],["attachments.map((attachment",{"_index":357,"title":{},"body":{"classes/Repository.html":{}}}],["attribution",{"_index":692,"title":{},"body":{"contributing.html":{}}}],["authored",{"_index":493,"title":{},"body":{"contributing.html":{}}}],["authors",{"_index":871,"title":{},"body":{"license.html":{}}}],["available",{"_index":455,"title":{},"body":{"contributing.html":{}}}],["avataaars",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["basecollections",{"_index":100,"title":{},"body":{"injectables/EntityManager.html":{}}}],["based",{"_index":694,"title":{},"body":{"contributing.html":{}}}],["before",{"_index":398,"title":{},"body":{"contributing.html":{}}}],["behavior",{"_index":452,"title":{},"body":{"contributing.html":{}}}],["best",{"_index":456,"title":{},"body":{"contributing.html":{}}}],["better",{"_index":689,"title":{},"body":{"contributing.html":{}}}],["blobbuffer",{"_index":319,"title":{},"body":{"classes/Repository.html":{}}}],["boolean",{"_index":119,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["boundaries",{"_index":48,"title":{},"body":{"injectables/ACL.html":{}}}],["browser",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["bug",{"_index":502,"title":{},"body":{"contributing.html":{}}}],["bugs",{"_index":435,"title":{},"body":{"contributing.html":{}}}],["builder",{"_index":146,"title":{},"body":{"injectables/EntityManager.html":{}}}],["c",{"_index":829,"title":{},"body":{"license.html":{}}}],["can't",{"_index":583,"title":{},"body":{"contributing.html":{}}}],["canactivate",{"_index":246,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["care",{"_index":487,"title":{},"body":{"contributing.html":{}}}],["carefully",{"_index":514,"title":{},"body":{"contributing.html":{}}}],["case",{"_index":460,"title":{},"body":{"contributing.html":{}}}],["central",{"_index":49,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["change",{"_index":820,"title":{},"body":{"index.html":{}}}],["changes",{"_index":825,"title":{},"body":{"index.html":{}}}],["charge",{"_index":834,"title":{},"body":{"license.html":{}}}],["chase",{"_index":508,"title":{},"body":{"contributing.html":{}}}],["check",{"_index":535,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":874,"title":{},"body":{"license.html":{}}}],["clarification",{"_index":465,"title":{},"body":{"contributing.html":{}}}],["class",{"_index":62,"title":{"classes/Repository.html":{}},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":265,"title":{},"body":{"classes/Repository.html":{}}}],["classic",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["clear",{"_index":671,"title":{},"body":{"contributing.html":{}}}],["cliqz/adblocker",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["clsx",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["code",{"_index":430,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["codex",{"_index":795,"title":{},"body":{"index.html":{}}}],["codexbuilding",{"_index":797,"title":{},"body":{"index.html":{}}}],["collect",{"_index":515,"title":{},"body":{"contributing.html":{}}}],["collected",{"_index":603,"title":{},"body":{"contributing.html":{}}}],["collection",{"_index":11,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["collection.findone",{"_index":224,"title":{},"body":{"injectables/EntityManager.html":{}}}],["collection.preinsert((data",{"_index":209,"title":{},"body":{"injectables/EntityManager.html":{}}}],["collection.presave((data",{"_index":215,"title":{},"body":{"injectables/EntityManager.html":{}}}],["collectionname",{"_index":117,"title":{},"body":{"injectables/EntityManager.html":{}}}],["comment",{"_index":646,"title":{},"body":{"contributing.html":{}}}],["commit",{"_index":441,"title":{},"body":{"contributing.html":{}}}],["community",{"_index":408,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["compiler",{"_index":559,"title":{},"body":{"contributing.html":{}}}],["complete",{"_index":518,"title":{},"body":{"contributing.html":{}}}],["completely",{"_index":632,"title":{},"body":{"contributing.html":{}}}],["components/versions",{"_index":533,"title":{},"body":{"contributing.html":{}}}],["components:build",{"_index":800,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":855,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":431,"title":{},"body":{"contributing.html":{}}}],["config",{"_index":821,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":643,"title":{},"body":{"contributing.html":{}}}],["connection",{"_index":881,"title":{},"body":{"license.html":{}}}],["consider",{"_index":666,"title":{},"body":{"contributing.html":{}}}],["const",{"_index":77,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["constructor",{"_index":98,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["constructor(acl",{"_index":99,"title":{},"body":{"injectables/EntityManager.html":{}}}],["constructor(appid",{"_index":281,"title":{},"body":{"classes/Repository.html":{}}}],["constructor(entitymanager",{"_index":247,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["container",{"_index":816,"title":{},"body":{"index.html":{}}}],["content",{"_index":495,"title":{},"body":{"contributing.html":{}}}],["contents",{"_index":385,"title":{},"body":{"contributing.html":{}}}],["context",{"_index":476,"title":{},"body":{"contributing.html":{}}}],["contract",{"_index":877,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":378,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":371,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contribution",{"_index":400,"title":{},"body":{"contributing.html":{}}}],["contributions",{"_index":380,"title":{},"body":{"contributing.html":{}}}],["convince",{"_index":654,"title":{},"body":{"contributing.html":{}}}],["copies",{"_index":850,"title":{},"body":{"license.html":{}}}],["copy",{"_index":837,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":828,"title":{},"body":{"license.html":{}}}],["core",{"_index":783,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":696,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":640,"title":{},"body":{"contributing.html":{}}}],["create",{"_index":600,"title":{},"body":{"contributing.html":{}}}],["created.guard.ts",{"_index":245,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["created.guard.ts:17",{"_index":250,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["created.guard.ts:25",{"_index":251,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["createdatabase",{"_index":94,"title":{},"body":{"injectables/EntityManager.html":{}}}],["createdatabase(name",{"_index":109,"title":{},"body":{"injectables/EntityManager.html":{}}}],["createrxdatabase",{"_index":133,"title":{},"body":{"injectables/EntityManager.html":{}}}],["creator",{"_index":172,"title":{},"body":{"injectables/EntityManager.html":{}}}],["critical",{"_index":625,"title":{},"body":{"contributing.html":{}}}],["current",{"_index":201,"title":{},"body":{"injectables/EntityManager.html":{},"contributing.html":{}}}],["current.creator",{"_index":204,"title":{},"body":{"injectables/EntityManager.html":{}}}],["current.name",{"_index":203,"title":{},"body":{"injectables/EntityManager.html":{}}}],["damages",{"_index":875,"title":{},"body":{"license.html":{}}}],["data",{"_index":174,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["data.createdat",{"_index":213,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.data.map((doc",{"_index":221,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.id",{"_index":212,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.name",{"_index":232,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.updatedat",{"_index":214,"title":{},"body":{"injectables/EntityManager.html":{}}}],["data.upsert",{"_index":220,"title":{},"body":{"injectables/EntityManager.html":{}}}],["database",{"_index":244,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databasecollections",{"_index":187,"title":{},"body":{"injectables/EntityManager.html":{}}}],["date().toisostring",{"_index":211,"title":{},"body":{"injectables/EntityManager.html":{}}}],["db",{"_index":106,"title":{},"body":{"injectables/EntityManager.html":{}}}],["db.addcollections(basecollections",{"_index":205,"title":{},"body":{"injectables/EntityManager.html":{}}}],["db.applicationpermissions.upsert(permission",{"_index":239,"title":{},"body":{"injectables/EntityManager.html":{}}}],["db[data.name",{"_index":219,"title":{},"body":{"injectables/EntityManager.html":{}}}],["deal",{"_index":839,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":882,"title":{},"body":{"license.html":{}}}],["default",{"_index":36,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"miscellaneous/variables.html":{}}}],["defer",{"_index":55,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["defined",{"_index":20,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["demonstrate",{"_index":684,"title":{},"body":{"contributing.html":{}}}],["dependencies",{"_index":706,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":484,"title":{},"body":{"contributing.html":{}}}],["describe",{"_index":516,"title":{},"body":{"contributing.html":{}}}],["description",{"_index":676,"title":{},"body":{"contributing.html":{}}}],["descriptive",{"_index":672,"title":{},"body":{"contributing.html":{}}}],["detail",{"_index":517,"title":{},"body":{"contributing.html":{}}}],["details",{"_index":389,"title":{},"body":{"contributing.html":{}}}],["determine",{"_index":527,"title":{},"body":{"contributing.html":{}}}],["developers",{"_index":655,"title":{},"body":{"contributing.html":{}}}],["development",{"_index":790,"title":{},"body":{"index.html":{}}}],["different",{"_index":386,"title":{},"body":{"contributing.html":{}}}],["disable",{"_index":43,"title":{},"body":{"injectables/ACL.html":{}}}],["discussed",{"_index":549,"title":{},"body":{"contributing.html":{}}}],["distribute",{"_index":846,"title":{},"body":{"license.html":{}}}],["doc",{"_index":84,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["doc.additionalproperties?.permissions",{"_index":234,"title":{},"body":{"injectables/EntityManager.html":{}}}],["doc.allattachments",{"_index":356,"title":{},"body":{"classes/Repository.html":{}}}],["doc.getattachment(attachmentid",{"_index":354,"title":{},"body":{"classes/Repository.html":{}}}],["doc.id",{"_index":225,"title":{},"body":{"injectables/EntityManager.html":{}}}],["doc.id}:${permission.kind}:${permission.mode}:${permission.target",{"_index":236,"title":{},"body":{"injectables/EntityManager.html":{}}}],["doc.putattachment(attachment",{"_index":343,"title":{},"body":{"classes/Repository.html":{}}}],["docid",{"_index":293,"title":{},"body":{"classes/Repository.html":{}}}],["docs.length",{"_index":335,"title":{},"body":{"classes/Repository.html":{}}}],["docs.map((doc",{"_index":332,"title":{},"body":{"classes/Repository.html":{}}}],["docs[0",{"_index":337,"title":{},"body":{"classes/Repository.html":{}}}],["doctojson",{"_index":267,"title":{},"body":{"classes/Repository.html":{}}}],["doctojson(doc",{"_index":283,"title":{},"body":{"classes/Repository.html":{}}}],["document",{"_index":216,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["document.createdat",{"_index":217,"title":{},"body":{"injectables/EntityManager.html":{}}}],["documentation",{"_index":439,"title":{},"body":{"contributing.html":{},"coverage.html":{},"license.html":{}}}],["docusaurus/core",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["docusaurus/preset",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["dom",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["don't",{"_index":411,"title":{},"body":{"contributing.html":{}}}],["dynamic",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["e.g",{"_index":530,"title":{},"body":{"contributing.html":{}}}],["easier",{"_index":402,"title":{},"body":{"contributing.html":{}}}],["easiest",{"_index":817,"title":{},"body":{"index.html":{}}}],["easy",{"_index":414,"title":{},"body":{"contributing.html":{}}}],["editions",{"_index":784,"title":{},"body":{"index.html":{}}}],["electron",{"_index":726,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["elsewhere",{"_index":574,"title":{},"body":{"contributing.html":{}}}],["email",{"_index":578,"title":{},"body":{"contributing.html":{}}}],["encouraged",{"_index":381,"title":{},"body":{"contributing.html":{}}}],["enhancement",{"_index":630,"title":{},"body":{"contributing.html":{}}}],["enhancements",{"_index":437,"title":{},"body":{"contributing.html":{}}}],["entity_manager_base_collections_token",{"_index":166,"title":{},"body":{"injectables/EntityManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entity_manager_initial_data_token",{"_index":168,"title":{},"body":{"injectables/EntityManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entitymanager",{"_index":87,"title":{"injectables/EntityManager.html":{}},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{}}}],["environment",{"_index":532,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["error",{"_index":362,"title":{},"body":{"classes/Repository.html":{},"contributing.html":{}}}],["error('collection",{"_index":191,"title":{},"body":{"injectables/EntityManager.html":{}}}],["error('database",{"_index":188,"title":{},"body":{"injectables/EntityManager.html":{}}}],["error('no",{"_index":341,"title":{},"body":{"classes/Repository.html":{}}}],["error('permissionsservice",{"_index":68,"title":{},"body":{"injectables/ACL.html":{}}}],["errors",{"_index":581,"title":{},"body":{"contributing.html":{}}}],["eslint",{"_index":42,"title":{},"body":{"injectables/ACL.html":{}}}],["etc",{"_index":483,"title":{},"body":{"contributing.html":{}}}],["event",{"_index":870,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":445,"title":{},"body":{"contributing.html":{}}}],["example",{"_index":803,"title":{},"body":{"index.html":{}}}],["exec",{"_index":226,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["existing",{"_index":458,"title":{},"body":{"contributing.html":{}}}],["expect",{"_index":589,"title":{},"body":{"contributing.html":{}}}],["expected",{"_index":448,"title":{},"body":{"contributing.html":{}}}],["experience",{"_index":406,"title":{},"body":{"contributing.html":{}}}],["experienced",{"_index":537,"title":{},"body":{"contributing.html":{}}}],["explain",{"_index":588,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":61,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"index.html":{}}}],["express",{"_index":745,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extensions/elements",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["factory",{"_index":256,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["factory's",{"_index":372,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["factory/permissions/collections/application",{"_index":50,"title":{},"body":{"injectables/ACL.html":{}}}],["factory/permissions/models/permission",{"_index":54,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["failureredirectto",{"_index":249,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["false",{"_index":38,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["fast",{"_index":523,"title":{},"body":{"contributing.html":{}}}],["feature",{"_index":657,"title":{},"body":{"contributing.html":{}}}],["features",{"_index":633,"title":{},"body":{"contributing.html":{}}}],["federation",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["feel",{"_index":470,"title":{},"body":{"contributing.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"coverage.html":{}}}],["filed",{"_index":607,"title":{},"body":{"contributing.html":{}}}],["files",{"_index":827,"title":{},"body":{"index.html":{},"license.html":{}}}],["find",{"_index":268,"title":{},"body":{"classes/Repository.html":{},"contributing.html":{}}}],["find(query",{"_index":286,"title":{},"body":{"classes/Repository.html":{}}}],["findone",{"_index":269,"title":{},"body":{"classes/Repository.html":{}}}],["findone(query",{"_index":289,"title":{},"body":{"classes/Repository.html":{}}}],["fine",{"_index":413,"title":{},"body":{"contributing.html":{}}}],["first",{"_index":374,"title":{},"body":{"contributing.html":{}}}],["fitness",{"_index":866,"title":{},"body":{"license.html":{}}}],["fits",{"_index":650,"title":{},"body":{"contributing.html":{}}}],["fix",{"_index":521,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["follow",{"_index":593,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":472,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["forkjoin",{"_index":151,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["forward",{"_index":410,"title":{},"body":{"contributing.html":{}}}],["found",{"_index":342,"title":{},"body":{"classes/Repository.html":{},"contributing.html":{}}}],["foundation",{"_index":786,"title":{},"body":{"index.html":{}}}],["free",{"_index":833,"title":{},"body":{"license.html":{}}}],["friends/colleagues",{"_index":429,"title":{},"body":{"contributing.html":{}}}],["from(attachment.getdata()).pipe",{"_index":348,"title":{},"body":{"classes/Repository.html":{}}}],["from(collection.upsert(doc)).pipe",{"_index":231,"title":{},"body":{"injectables/EntityManager.html":{}}}],["from(query.exec()).pipe(map((doc",{"_index":83,"title":{},"body":{"injectables/ACL.html":{}}}],["from(this.collection.bulkinsert(permissions)).pipe",{"_index":70,"title":{},"body":{"injectables/ACL.html":{}}}],["functionality",{"_index":636,"title":{},"body":{"contributing.html":{}}}],["furnished",{"_index":853,"title":{},"body":{"license.html":{}}}],["gen",{"_index":695,"title":{},"body":{"contributing.html":{}}}],["getallattachments",{"_index":270,"title":{},"body":{"classes/Repository.html":{}}}],["getallattachments(docid",{"_index":291,"title":{},"body":{"classes/Repository.html":{}}}],["getattachment",{"_index":271,"title":{},"body":{"classes/Repository.html":{}}}],["getattachment(docid",{"_index":294,"title":{},"body":{"classes/Repository.html":{}}}],["getrepository",{"_index":95,"title":{},"body":{"injectables/EntityManager.html":{}}}],["getrepository(collectionname",{"_index":112,"title":{},"body":{"injectables/EntityManager.html":{}}}],["getrxstoragepouch",{"_index":142,"title":{},"body":{"injectables/EntityManager.html":{}}}],["getrxstoragepouch('idb",{"_index":196,"title":{},"body":{"injectables/EntityManager.html":{}}}],["getting",{"_index":369,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["gifs",{"_index":683,"title":{},"body":{"contributing.html":{}}}],["github",{"_index":548,"title":{},"body":{"contributing.html":{}}}],["good",{"_index":503,"title":{},"body":{"contributing.html":{}}}],["google/model",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["governed",{"_index":447,"title":{},"body":{"contributing.html":{}}}],["granted",{"_index":832,"title":{},"body":{"license.html":{}}}],["guard",{"_index":240,"title":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":242,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"overview.html":{}}}],["guide",{"_index":693,"title":{},"body":{"contributing.html":{}}}],["guidelines",{"_index":637,"title":{},"body":{"contributing.html":{}}}],["guides",{"_index":628,"title":{},"body":{"contributing.html":{}}}],["handles",{"_index":391,"title":{},"body":{"contributing.html":{}}}],["happy",{"_index":419,"title":{},"body":{"contributing.html":{}}}],["haspermission",{"_index":14,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["haspermission(permission",{"_index":17,"title":{},"body":{"injectables/ACL.html":{}}}],["having",{"_index":542,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":388,"title":{},"body":{"contributing.html":{}}}],["hereby",{"_index":831,"title":{},"body":{"license.html":{}}}],["holders",{"_index":872,"title":{},"body":{"license.html":{}}}],["hotkeys",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["icons",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["id",{"_index":81,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["idb",{"_index":129,"title":{},"body":{"injectables/EntityManager.html":{},"dependencies.html":{}}}],["idea",{"_index":649,"title":{},"body":{"contributing.html":{}}}],["identifier",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":674,"title":{},"body":{"contributing.html":{}}}],["implemented",{"_index":627,"title":{},"body":{"contributing.html":{}}}],["implements",{"_index":258,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["implied",{"_index":862,"title":{},"body":{"license.html":{}}}],["import",{"_index":40,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["improvements",{"_index":635,"title":{},"body":{"contributing.html":{}}}],["improving",{"_index":438,"title":{},"body":{"contributing.html":{}}}],["include",{"_index":680,"title":{},"body":{"contributing.html":{}}}],["included",{"_index":858,"title":{},"body":{"license.html":{}}}],["includes",{"_index":596,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["including",{"_index":544,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["incompatible",{"_index":531,"title":{},"body":{"contributing.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":642,"title":{},"body":{"contributing.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["information",{"_index":511,"title":{},"body":{"contributing.html":{}}}],["initialdata",{"_index":101,"title":{},"body":{"injectables/EntityManager.html":{}}}],["initialize",{"_index":15,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["initialize(collection",{"_index":28,"title":{},"body":{"injectables/ACL.html":{}}}],["initialized",{"_index":69,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["inject",{"_index":124,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["inject(entity_manager_base_collections_token",{"_index":171,"title":{},"body":{"injectables/EntityManager.html":{}}}],["inject(entity_manager_initial_data_token",{"_index":173,"title":{},"body":{"injectables/EntityManager.html":{}}}],["inject(on_database_created_guard_failure_redirect_token",{"_index":259,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{}}}],["inject(on_not_database_created_guard_failure_redirect_token",{"_index":264,"title":{},"body":{"guards/IsNotDatabaseCreatedGuard.html":{}}}],["injectable",{"_index":0,"title":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"overview.html":{}}}],["injectiontoken",{"_index":125,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('entity_manager_base_collections_token",{"_index":167,"title":{},"body":{"injectables/EntityManager.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('entity_manager_initial_data_token",{"_index":169,"title":{},"body":{"injectables/EntityManager.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":564,"title":{},"body":{"contributing.html":{}}}],["insert",{"_index":272,"title":{},"body":{"classes/Repository.html":{}}}],["insert(doc",{"_index":297,"title":{},"body":{"classes/Repository.html":{}}}],["inspiration",{"_index":691,"title":{},"body":{"contributing.html":{}}}],["install",{"_index":818,"title":{},"body":{"index.html":{}}}],["instead",{"_index":575,"title":{},"body":{"contributing.html":{}}}],["internet",{"_index":468,"title":{},"body":{"contributing.html":{}}}],["interpreter",{"_index":558,"title":{},"body":{"contributing.html":{}}}],["investigate",{"_index":513,"title":{},"body":{"contributing.html":{}}}],["involved",{"_index":407,"title":{},"body":{"contributing.html":{}}}],["isdatabasecreated",{"_index":96,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["isdatabasecreatedguard",{"_index":241,"title":{"guards/IsDatabaseCreatedGuard.html":{}},"body":{"guards/IsDatabaseCreatedGuard.html":{},"coverage.html":{}}}],["isinitialized",{"_index":12,"title":{},"body":{"injectables/ACL.html":{}}}],["isnotdatabasecreatedguard",{"_index":262,"title":{"guards/IsNotDatabaseCreatedGuard.html":{}},"body":{"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{}}}],["isolate",{"_index":598,"title":{},"body":{"contributing.html":{}}}],["issue",{"_index":462,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":459,"title":{},"body":{"contributing.html":{}}}],["it's",{"_index":606,"title":{},"body":{"contributing.html":{}}}],["join",{"_index":443,"title":{},"body":{"contributing.html":{}}}],["js",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["js/react",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["json.parse(json.stringify(doc",{"_index":366,"title":{},"body":{"classes/Repository.html":{}}}],["keep",{"_index":658,"title":{},"body":{"contributing.html":{}}}],["key",{"_index":198,"title":{},"body":{"injectables/EntityManager.html":{}}}],["keyof",{"_index":186,"title":{},"body":{"injectables/EntityManager.html":{}}}],["kind",{"_index":74,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{},"license.html":{}}}],["label",{"_index":587,"title":{},"body":{"contributing.html":{}}}],["latest",{"_index":525,"title":{},"body":{"contributing.html":{}}}],["leaflet",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["leave",{"_index":505,"title":{},"body":{"contributing.html":{}}}],["left",{"_index":626,"title":{},"body":{"contributing.html":{}}}],["legal",{"_index":490,"title":{},"body":{"contributing.html":{}}}],["liability",{"_index":876,"title":{},"body":{"license.html":{}}}],["liable",{"_index":873,"title":{},"body":{"license.html":{}}}],["library",{"_index":669,"title":{},"body":{"contributing.html":{}}}],["libs/.../entity",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../is",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../repository.ts",{"_index":890,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/persistence/src/lib/guards/is",{"_index":243,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/persistence/src/lib/services/acl.ts",{"_index":6,"title":{},"body":{"injectables/ACL.html":{},"coverage.html":{}}}],["libs/persistence/src/lib/services/acl.ts:16",{"_index":35,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/acl.ts:18",{"_index":39,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/acl.ts:20",{"_index":30,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/acl.ts:29",{"_index":33,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/acl.ts:43",{"_index":21,"title":{},"body":{"injectables/ACL.html":{}}}],["libs/persistence/src/lib/services/entity",{"_index":88,"title":{},"body":{"injectables/EntityManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/persistence/src/lib/services/repository.ts",{"_index":266,"title":{},"body":{"classes/Repository.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["libs/persistence/src/lib/services/repository.ts:106",{"_index":308,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:134",{"_index":296,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:172",{"_index":292,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:212",{"_index":312,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:243",{"_index":302,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:279",{"_index":314,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:303",{"_index":285,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:37",{"_index":282,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:48",{"_index":298,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:55",{"_index":318,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:62",{"_index":290,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:69",{"_index":287,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:76",{"_index":300,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:83",{"_index":304,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:89",{"_index":316,"title":{},"body":{"classes/Repository.html":{}}}],["libs/persistence/src/lib/services/repository.ts:99",{"_index":310,"title":{},"body":{"classes/Repository.html":{}}}],["license",{"_index":500,"title":{"license.html":{}},"body":{"contributing.html":{},"license.html":{}}}],["licensed",{"_index":788,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":842,"title":{},"body":{"license.html":{}}}],["limited",{"_index":863,"title":{},"body":{"license.html":{}}}],["line",{"_index":45,"title":{},"body":{"injectables/ACL.html":{}}}],["linters",{"_index":805,"title":{},"body":{"index.html":{}}}],["linux",{"_index":554,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["literal",{"_index":18,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":426,"title":{},"body":{"contributing.html":{}}}],["lock",{"_index":826,"title":{},"body":{"index.html":{}}}],["login",{"_index":257,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"miscellaneous/variables.html":{}}}],["looking",{"_index":534,"title":{},"body":{"contributing.html":{}}}],["looks",{"_index":409,"title":{},"body":{"contributing.html":{}}}],["lot",{"_index":401,"title":{},"body":{"contributing.html":{}}}],["macos",{"_index":555,"title":{},"body":{"contributing.html":{}}}],["maintainers",{"_index":403,"title":{},"body":{"contributing.html":{}}}],["majority",{"_index":661,"title":{},"body":{"contributing.html":{}}}],["make",{"_index":393,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["making",{"_index":399,"title":{},"body":{"contributing.html":{}}}],["manager",{"_index":254,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"contributing.html":{}}}],["manager.ts",{"_index":89,"title":{},"body":{"injectables/EntityManager.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["manager.ts:102",{"_index":113,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:131",{"_index":111,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:146",{"_index":105,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:182",{"_index":108,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:69",{"_index":123,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:71",{"_index":102,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:88",{"_index":121,"title":{},"body":{"injectables/EntityManager.html":{}}}],["manager.ts:98",{"_index":118,"title":{},"body":{"injectables/EntityManager.html":{}}}],["mangoquery",{"_index":320,"title":{},"body":{"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["many",{"_index":677,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["map",{"_index":56,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["map((attachment",{"_index":344,"title":{},"body":{"classes/Repository.html":{}}}],["map((data",{"_index":349,"title":{},"body":{"classes/Repository.html":{}}}],["map((doc",{"_index":324,"title":{},"body":{"classes/Repository.html":{}}}],["map((docs",{"_index":331,"title":{},"body":{"classes/Repository.html":{}}}],["map((permission",{"_index":235,"title":{},"body":{"injectables/EntityManager.html":{}}}],["mark",{"_index":614,"title":{},"body":{"contributing.html":{}}}],["marked",{"_index":621,"title":{},"body":{"contributing.html":{}}}],["matching",{"_index":86,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maybe",{"_index":641,"title":{},"body":{"contributing.html":{}}}],["mdi/svg",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["mdx",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["meetups",{"_index":427,"title":{},"body":{"contributing.html":{}}}],["member",{"_index":609,"title":{},"body":{"contributing.html":{}}}],["mention",{"_index":425,"title":{},"body":{"contributing.html":{}}}],["merchantability",{"_index":865,"title":{},"body":{"license.html":{}}}],["merge",{"_index":844,"title":{},"body":{"license.html":{}}}],["merits",{"_index":656,"title":{},"body":{"contributing.html":{}}}],["messages",{"_index":442,"title":{},"body":{"contributing.html":{}}}],["metadata",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["metaverse",{"_index":373,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["mind",{"_index":659,"title":{},"body":{"contributing.html":{}}}],["minor",{"_index":634,"title":{},"body":{"contributing.html":{}}}],["minority",{"_index":665,"title":{},"body":{"contributing.html":{}}}],["miscellaneous",{"_index":887,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":787,"title":{},"body":{"index.html":{},"license.html":{}}}],["mnt/d/workspace/metaverse/node_modules/electron/dist/chrome",{"_index":809,"title":{},"body":{"index.html":{}}}],["mode",{"_index":75,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"index.html":{}}}],["modify",{"_index":843,"title":{},"body":{"license.html":{}}}],["module",{"_index":47,"title":{},"body":{"injectables/ACL.html":{}}}],["modules",{"_index":883,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":510,"title":{},"body":{"contributing.html":{}}}],["much",{"_index":475,"title":{},"body":{"contributing.html":{}}}],["name",{"_index":24,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["necessary",{"_index":496,"title":{},"body":{"contributing.html":{}}}],["need",{"_index":464,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["needing",{"_index":507,"title":{},"body":{"contributing.html":{}}}],["needs",{"_index":615,"title":{},"body":{"contributing.html":{}}}],["nestjs/common",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["never",{"_index":570,"title":{},"body":{"contributing.html":{}}}],["new",{"_index":67,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":44,"title":{},"body":{"injectables/ACL.html":{}}}],["ng",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["ngxd/core",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["nodejs",{"_index":481,"title":{},"body":{"contributing.html":{}}}],["noninfringement",{"_index":869,"title":{},"body":{"license.html":{}}}],["notice",{"_index":491,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["now",{"_index":210,"title":{},"body":{"injectables/EntityManager.html":{}}}],["npm",{"_index":482,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["npm_config_platform",{"_index":824,"title":{},"body":{"index.html":{}}}],["npm_config_platform=win32",{"_index":822,"title":{},"body":{"index.html":{}}}],["nrwl/nx/enforce",{"_index":46,"title":{},"body":{"injectables/ACL.html":{}}}],["null",{"_index":329,"title":{},"body":{"classes/Repository.html":{}}}],["nx",{"_index":794,"title":{},"body":{"index.html":{}}}],["object.assign(result",{"_index":202,"title":{},"body":{"injectables/EntityManager.html":{}}}],["object.values(db).foreach((collection",{"_index":208,"title":{},"body":{"injectables/EntityManager.html":{}}}],["observable",{"_index":27,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["observe",{"_index":273,"title":{},"body":{"classes/Repository.html":{}}}],["observe(query",{"_index":299,"title":{},"body":{"classes/Repository.html":{}}}],["observeattachments",{"_index":274,"title":{},"body":{"classes/Repository.html":{}}}],["observeattachments(docid",{"_index":301,"title":{},"body":{"classes/Repository.html":{}}}],["observeone",{"_index":275,"title":{},"body":{"classes/Repository.html":{}}}],["observeone(query",{"_index":303,"title":{},"body":{"classes/Repository.html":{}}}],["obtaining",{"_index":836,"title":{},"body":{"license.html":{}}}],["obvious",{"_index":611,"title":{},"body":{"contributing.html":{}}}],["of(doc.allattachments",{"_index":351,"title":{},"body":{"classes/Repository.html":{}}}],["of(doc.getattachment(attachmentid",{"_index":346,"title":{},"body":{"classes/Repository.html":{}}}],["of(haspermission",{"_index":365,"title":{},"body":{"classes/Repository.html":{}}}],["of(repository",{"_index":194,"title":{},"body":{"injectables/EntityManager.html":{}}}],["of(true",{"_index":223,"title":{},"body":{"injectables/EntityManager.html":{}}}],["of(undefined",{"_index":230,"title":{},"body":{"injectables/EntityManager.html":{}}}],["older",{"_index":568,"title":{},"body":{"contributing.html":{}}}],["on/plugin",{"_index":668,"title":{},"body":{"contributing.html":{}}}],["on_database_created_guard_failure_redirect_token",{"_index":255,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["on_not_database_created_guard_failure_redirect_token",{"_index":263,"title":{},"body":{"guards/IsNotDatabaseCreatedGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["once",{"_index":605,"title":{},"body":{"contributing.html":{}}}],["one",{"_index":648,"title":{},"body":{"contributing.html":{}}}],["open",{"_index":473,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["opening",{"_index":647,"title":{},"body":{"contributing.html":{}}}],["optional",{"_index":10,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["ormmethods",{"_index":115,"title":{},"body":{"injectables/EntityManager.html":{}}}],["os",{"_index":552,"title":{},"body":{"contributing.html":{}}}],["others",{"_index":506,"title":{},"body":{"contributing.html":{}}}],["otherwise",{"_index":879,"title":{},"body":{"license.html":{}}}],["out",{"_index":405,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["output",{"_index":565,"title":{},"body":{"contributing.html":{}}}],["outside",{"_index":547,"title":{},"body":{"contributing.html":{}}}],["overflow",{"_index":546,"title":{},"body":{"contributing.html":{}}}],["overview",{"_index":884,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":811,"title":{},"body":{"index.html":{}}}],["package",{"_index":562,"title":{"dependencies.html":{}},"body":{"contributing.html":{},"index.html":{}}}],["packages",{"_index":782,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["part",{"_index":685,"title":{},"body":{"contributing.html":{}}}],["participating",{"_index":446,"title":{},"body":{"contributing.html":{}}}],["particular",{"_index":867,"title":{},"body":{"license.html":{}}}],["password",{"_index":110,"title":{},"body":{"injectables/EntityManager.html":{}}}],["password).pipe",{"_index":177,"title":{},"body":{"injectables/EntityManager.html":{}}}],["perform",{"_index":363,"title":{},"body":{"classes/Repository.html":{},"contributing.html":{}}}],["permission",{"_index":25,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"license.html":{}}}],["permission.appid}:${permission.kind}:${permission.mode}:${permission.target",{"_index":82,"title":{},"body":{"injectables/ACL.html":{}}}],["permissionkind",{"_index":52,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["permissionkind.collection",{"_index":359,"title":{},"body":{"classes/Repository.html":{}}}],["permissionmode",{"_index":53,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["permissions",{"_index":34,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["permissions.collection",{"_index":51,"title":{},"body":{"injectables/ACL.html":{}}}],["permissions.length",{"_index":237,"title":{},"body":{"injectables/EntityManager.html":{}}}],["permissions.map((permission",{"_index":238,"title":{},"body":{"injectables/EntityManager.html":{}}}],["permit",{"_index":851,"title":{},"body":{"license.html":{}}}],["person",{"_index":835,"title":{},"body":{"license.html":{}}}],["persons",{"_index":852,"title":{},"body":{"license.html":{}}}],["phaser",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":207,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["pipe(map((result",{"_index":227,"title":{},"body":{"injectables/EntityManager.html":{}}}],["pipe(tap((db",{"_index":197,"title":{},"body":{"injectables/EntityManager.html":{}}}],["platform",{"_index":479,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["please",{"_index":392,"title":{},"body":{"contributing.html":{}}}],["point",{"_index":584,"title":{},"body":{"contributing.html":{}}}],["portal",{"_index":792,"title":{},"body":{"index.html":{}}}],["portions",{"_index":860,"title":{},"body":{"license.html":{}}}],["possible",{"_index":489,"title":{},"body":{"contributing.html":{}}}],["possibly",{"_index":563,"title":{},"body":{"contributing.html":{}}}],["potential",{"_index":522,"title":{},"body":{"contributing.html":{}}}],["potentially",{"_index":538,"title":{},"body":{"contributing.html":{}}}],["pouchdb",{"_index":127,"title":{},"body":{"injectables/EntityManager.html":{},"dependencies.html":{}}}],["pouchdbadapteridb",{"_index":126,"title":{},"body":{"injectables/EntityManager.html":{}}}],["previous",{"_index":604,"title":{},"body":{"contributing.html":{}}}],["private",{"_index":9,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["probably",{"_index":813,"title":{},"body":{"index.html":{}}}],["problem",{"_index":599,"title":{},"body":{"contributing.html":{}}}],["project",{"_index":390,"title":{},"body":{"contributing.html":{}}}],["project's",{"_index":423,"title":{},"body":{"contributing.html":{}}}],["projects",{"_index":688,"title":{},"body":{"contributing.html":{}}}],["promise",{"_index":206,"title":{},"body":{"injectables/EntityManager.html":{}}}],["properties",{"_index":8,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["property",{"_index":785,"title":{},"body":{"index.html":{}}}],["provide",{"_index":474,"title":{},"body":{"contributing.html":{}}}],["provided",{"_index":498,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["providedin",{"_index":59,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":91,"title":{},"body":{"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"contributing.html":{}}}],["publish",{"_index":845,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":868,"title":{},"body":{"license.html":{}}}],["putattachment",{"_index":276,"title":{},"body":{"classes/Repository.html":{}}}],["putattachment(docid",{"_index":305,"title":{},"body":{"classes/Repository.html":{}}}],["query",{"_index":78,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["question",{"_index":432,"title":{},"body":{"contributing.html":{}}}],["react",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":395,"title":{},"body":{"contributing.html":{}}}],["readme",{"_index":424,"title":{},"body":{"contributing.html":{}}}],["readonly",{"_index":170,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["really",{"_index":528,"title":{},"body":{"contributing.html":{}}}],["recommend",{"_index":471,"title":{},"body":{"contributing.html":{}}}],["record",{"_index":687,"title":{},"body":{"contributing.html":{}}}],["recreate",{"_index":594,"title":{},"body":{"contributing.html":{}}}],["reduced",{"_index":601,"title":{},"body":{"contributing.html":{}}}],["refer",{"_index":422,"title":{},"body":{"contributing.html":{}}}],["reflect",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":572,"title":{},"body":{"contributing.html":{}}}],["relevant",{"_index":396,"title":{},"body":{"contributing.html":{}}}],["reliably",{"_index":566,"title":{},"body":{"contributing.html":{}}}],["remove",{"_index":277,"title":{},"body":{"classes/Repository.html":{},"index.html":{}}}],["remove(query",{"_index":309,"title":{},"body":{"classes/Repository.html":{}}}],["removeattachment",{"_index":278,"title":{},"body":{"classes/Repository.html":{}}}],["removeattachment(docid",{"_index":311,"title":{},"body":{"classes/Repository.html":{}}}],["replaysubject",{"_index":152,"title":{},"body":{"injectables/EntityManager.html":{}}}],["replaysubject(0",{"_index":122,"title":{},"body":{"injectables/EntityManager.html":{}}}],["report",{"_index":450,"title":{},"body":{"contributing.html":{}}}],["reporting",{"_index":434,"title":{},"body":{"contributing.html":{}}}],["reports",{"_index":597,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":158,"title":{"classes/Repository.html":{}},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{},"coverage.html":{}}}],["repository(appid",{"_index":192,"title":{},"body":{"injectables/EntityManager.html":{}}}],["repro",{"_index":616,"title":{},"body":{"contributing.html":{}}}],["reproduce",{"_index":567,"title":{},"body":{"contributing.html":{}}}],["reproduced",{"_index":620,"title":{},"body":{"contributing.html":{}}}],["reproduction",{"_index":591,"title":{},"body":{"contributing.html":{}}}],["requestpermission",{"_index":279,"title":{},"body":{"classes/Repository.html":{}}}],["requestpermission(mode",{"_index":313,"title":{},"body":{"classes/Repository.html":{}}}],["requestpermissions",{"_index":16,"title":{},"body":{"injectables/ACL.html":{}}}],["requestpermissions(permissions",{"_index":32,"title":{},"body":{"injectables/ACL.html":{}}}],["restriction",{"_index":841,"title":{},"body":{"license.html":{}}}],["result",{"_index":200,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["result._attachments",{"_index":367,"title":{},"body":{"classes/Repository.html":{}}}],["results",{"_index":85,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":64,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["returns",{"_index":26,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["rights",{"_index":497,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["root",{"_index":60,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["router",{"_index":248,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["run",{"_index":582,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["running",{"_index":478,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["runtime",{"_index":561,"title":{},"body":{"contributing.html":{}}}],["rxcollection",{"_index":134,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["rxcollectioncreator",{"_index":135,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdatabase",{"_index":104,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["rxdb/dist/types/types",{"_index":321,"title":{},"body":{"classes/Repository.html":{}}}],["rxdb/plugins/attachments",{"_index":131,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/core",{"_index":136,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/dev",{"_index":138,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/encryption",{"_index":140,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/pouchdb",{"_index":143,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/query",{"_index":145,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/update",{"_index":148,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdb/plugins/validate",{"_index":150,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbattachmentsplugin",{"_index":130,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbdevmodeplugin",{"_index":137,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbencryptionplugin",{"_index":139,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbquerybuilderplugin",{"_index":144,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbupdateplugin",{"_index":147,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdbvalidateplugin",{"_index":149,"title":{},"body":{"injectables/EntityManager.html":{}}}],["rxdocument",{"_index":284,"title":{},"body":{"classes/Repository.html":{}}}],["rxdocumenttype",{"_index":114,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["rxjs",{"_index":58,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"dependencies.html":{}}}],["same",{"_index":541,"title":{},"body":{"contributing.html":{}}}],["sandbox",{"_index":810,"title":{},"body":{"index.html":{}}}],["scope",{"_index":651,"title":{},"body":{"contributing.html":{}}}],["screenshots",{"_index":681,"title":{},"body":{"contributing.html":{}}}],["sdk",{"_index":560,"title":{},"body":{"contributing.html":{}}}],["search",{"_index":457,"title":{},"body":{"contributing.html":{}}}],["section",{"_index":397,"title":{},"body":{"contributing.html":{}}}],["security",{"_index":571,"title":{},"body":{"contributing.html":{}}}],["see",{"_index":383,"title":{},"body":{"contributing.html":{}}}],["seems",{"_index":485,"title":{},"body":{"contributing.html":{}}}],["select",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["select/ng",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["selector",{"_index":80,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["sell",{"_index":849,"title":{},"body":{"license.html":{}}}],["sensitive",{"_index":576,"title":{},"body":{"contributing.html":{}}}],["sent",{"_index":577,"title":{},"body":{"contributing.html":{}}}],["serve",{"_index":690,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["services/entity",{"_index":253,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["setupdatabase",{"_index":97,"title":{},"body":{"injectables/EntityManager.html":{}}}],["setupdatabase(name",{"_index":120,"title":{},"body":{"injectables/EntityManager.html":{}}}],["shall",{"_index":857,"title":{},"body":{"license.html":{}}}],["shouldinsert",{"_index":222,"title":{},"body":{"injectables/EntityManager.html":{}}}],["shouldinsert$.pipe",{"_index":228,"title":{},"body":{"injectables/EntityManager.html":{}}}],["shouldn't",{"_index":504,"title":{},"body":{"contributing.html":{}}}],["show",{"_index":416,"title":{},"body":{"contributing.html":{}}}],["side",{"_index":529,"title":{},"body":{"contributing.html":{}}}],["simple",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["skipifsame",{"_index":307,"title":{},"body":{"classes/Repository.html":{}}}],["small",{"_index":662,"title":{},"body":{"contributing.html":{}}}],["smooth",{"_index":404,"title":{},"body":{"contributing.html":{}}}],["software",{"_index":789,"title":{},"body":{"index.html":{},"license.html":{}}}],["solved",{"_index":540,"title":{},"body":{"contributing.html":{}}}],["someone",{"_index":592,"title":{},"body":{"contributing.html":{}}}],["soon",{"_index":488,"title":{},"body":{"contributing.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"index.html":{}}}],["stack",{"_index":545,"title":{},"body":{"contributing.html":{}}}],["star",{"_index":420,"title":{},"body":{"contributing.html":{}}}],["started",{"_index":370,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["staticmethods",{"_index":116,"title":{},"body":{"injectables/EntityManager.html":{}}}],["step",{"_index":675,"title":{},"body":{"contributing.html":{}}}],["steps",{"_index":519,"title":{},"body":{"contributing.html":{}}}],["still",{"_index":463,"title":{},"body":{"contributing.html":{}}}],["storage",{"_index":195,"title":{},"body":{"injectables/EntityManager.html":{}}}],["store",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["storybook",{"_index":802,"title":{},"body":{"index.html":{}}}],["string",{"_index":73,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{}}}],["strong",{"_index":653,"title":{},"body":{"contributing.html":{}}}],["styleguides",{"_index":440,"title":{},"body":{"contributing.html":{}}}],["subject",{"_index":854,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":847,"title":{},"body":{"license.html":{}}}],["submit",{"_index":569,"title":{},"body":{"contributing.html":{}}}],["submitting",{"_index":501,"title":{},"body":{"contributing.html":{}}}],["subset",{"_index":663,"title":{},"body":{"contributing.html":{}}}],["substantial",{"_index":859,"title":{},"body":{"license.html":{}}}],["subsystem",{"_index":814,"title":{},"body":{"index.html":{}}}],["success",{"_index":71,"title":{},"body":{"injectables/ACL.html":{}}}],["such",{"_index":624,"title":{},"body":{"contributing.html":{}}}],["suggested",{"_index":644,"title":{},"body":{"contributing.html":{}}}],["suggesting",{"_index":436,"title":{},"body":{"contributing.html":{}}}],["suggestion",{"_index":631,"title":{},"body":{"contributing.html":{}}}],["suggestions",{"_index":639,"title":{},"body":{"contributing.html":{}}}],["suitable",{"_index":461,"title":{},"body":{"contributing.html":{}}}],["support",{"_index":415,"title":{},"body":{"contributing.html":{}}}],["sure",{"_index":394,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["switchmap",{"_index":153,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["switchmap((attachment",{"_index":347,"title":{},"body":{"classes/Repository.html":{}}}],["switchmap((attachments",{"_index":352,"title":{},"body":{"classes/Repository.html":{}}}],["switchmap((db",{"_index":178,"title":{},"body":{"injectables/EntityManager.html":{}}}],["switchmap((doc",{"_index":340,"title":{},"body":{"classes/Repository.html":{}}}],["switchmap((haspermission",{"_index":361,"title":{},"body":{"classes/Repository.html":{}}}],["switchmap((shouldinsert",{"_index":229,"title":{},"body":{"injectables/EntityManager.html":{}}}],["table",{"_index":384,"title":{},"body":{"contributing.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":617,"title":{},"body":{"contributing.html":{}}}],["tags",{"_index":623,"title":{},"body":{"contributing.html":{}}}],["take",{"_index":486,"title":{},"body":{"contributing.html":{}}}],["taking",{"_index":376,"title":{},"body":{"contributing.html":{}}}],["talk",{"_index":586,"title":{},"body":{"contributing.html":{}}}],["tap",{"_index":154,"title":{},"body":{"injectables/EntityManager.html":{}}}],["tap((db",{"_index":180,"title":{},"body":{"injectables/EntityManager.html":{}}}],["target",{"_index":76,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["target=lint",{"_index":807,"title":{},"body":{"index.html":{}}}],["targeting",{"_index":664,"title":{},"body":{"contributing.html":{}}}],["team",{"_index":444,"title":{},"body":{"contributing.html":{}}}],["tell",{"_index":428,"title":{},"body":{"contributing.html":{}}}],["test",{"_index":602,"title":{},"body":{"contributing.html":{}}}],["tests",{"_index":806,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":375,"title":{},"body":{"contributing.html":{}}}],["that's",{"_index":412,"title":{},"body":{"contributing.html":{}}}],["themes",{"_index":798,"title":{},"body":{"index.html":{}}}],["themesrunning",{"_index":801,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":512,"title":{},"body":{"contributing.html":{}}}],["this._dbinstance",{"_index":185,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this._dbinstance.collections",{"_index":189,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.acl",{"_index":193,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["this.acl.initialize(db.applicationpermissions",{"_index":181,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.addbasecollections(db",{"_index":179,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.addinitialdata(db",{"_index":182,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.appid",{"_index":358,"title":{},"body":{"classes/Repository.html":{}}}],["this.basecollections.reduce",{"_index":199,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.collection",{"_index":65,"title":{},"body":{"injectables/ACL.html":{},"classes/Repository.html":{}}}],["this.collection.find(query",{"_index":333,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.find(query).exec",{"_index":330,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.find(query).remove",{"_index":339,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.find(where).update(update",{"_index":338,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.findone",{"_index":79,"title":{},"body":{"injectables/ACL.html":{}}}],["this.collection.findone(query).exec",{"_index":328,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.insert(doc",{"_index":323,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.name",{"_index":360,"title":{},"body":{"classes/Repository.html":{}}}],["this.collection.upsert(doc",{"_index":326,"title":{},"body":{"classes/Repository.html":{}}}],["this.createdatabase(name",{"_index":176,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.doctojson(doc",{"_index":325,"title":{},"body":{"classes/Repository.html":{}}}],["this.entitymanager.isdatabasecreated",{"_index":260,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["this.initialdata.map((data",{"_index":218,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.initialize$.next",{"_index":183,"title":{},"body":{"injectables/EntityManager.html":{}}}],["this.isinitialized",{"_index":63,"title":{},"body":{"injectables/ACL.html":{}}}],["this.observe(query).pipe",{"_index":334,"title":{},"body":{"classes/Repository.html":{}}}],["this.requestpermission(permissionmode.read).pipe",{"_index":327,"title":{},"body":{"classes/Repository.html":{}}}],["this.requestpermission(permissionmode.write).pipe",{"_index":322,"title":{},"body":{"classes/Repository.html":{}}}],["this.router.navigate([this.failureredirectto",{"_index":261,"title":{},"body":{"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{}}}],["those",{"_index":613,"title":{},"body":{"contributing.html":{}}}],["through",{"_index":629,"title":{},"body":{"contributing.html":{}}}],["throwerror",{"_index":57,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["time",{"_index":377,"title":{},"body":{"contributing.html":{}}}],["title",{"_index":673,"title":{},"body":{"contributing.html":{}}}],["tool",{"_index":686,"title":{},"body":{"contributing.html":{}}}],["tort",{"_index":878,"title":{},"body":{"license.html":{}}}],["trace",{"_index":550,"title":{},"body":{"contributing.html":{}}}],["traceback",{"_index":551,"title":{},"body":{"contributing.html":{}}}],["track",{"_index":580,"title":{},"body":{"contributing.html":{}}}],["tracked",{"_index":670,"title":{},"body":{"contributing.html":{}}}],["tracker",{"_index":543,"title":{},"body":{"contributing.html":{}}}],["true",{"_index":66,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{}}}],["try",{"_index":610,"title":{},"body":{"contributing.html":{}}}],["tslib",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["tweet",{"_index":421,"title":{},"body":{"contributing.html":{}}}],["type",{"_index":19,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"guards/IsDatabaseCreatedGuard.html":{},"guards/IsNotDatabaseCreatedGuard.html":{},"classes/Repository.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":888,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":379,"title":{},"body":{"contributing.html":{}}}],["typescript",{"_index":781,"title":{},"body":{"index.html":{}}}],["unacceptable",{"_index":451,"title":{},"body":{"contributing.html":{}}}],["undefined",{"_index":184,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["under",{"_index":499,"title":{},"body":{"contributing.html":{}}}],["understand",{"_index":638,"title":{},"body":{"contributing.html":{}}}],["uninstall",{"_index":819,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":190,"title":{},"body":{"injectables/EntityManager.html":{}}}],["unset",{"_index":823,"title":{},"body":{"index.html":{}}}],["until",{"_index":619,"title":{},"body":{"contributing.html":{}}}],["up",{"_index":509,"title":{},"body":{"contributing.html":{}}}],["update",{"_index":280,"title":{},"body":{"classes/Repository.html":{},"miscellaneous/typealiases.html":{}}}],["update(where",{"_index":315,"title":{},"body":{"classes/Repository.html":{}}}],["uphold",{"_index":449,"title":{},"body":{"contributing.html":{}}}],["upsert",{"_index":175,"title":{},"body":{"injectables/EntityManager.html":{},"classes/Repository.html":{}}}],["upsert(doc",{"_index":317,"title":{},"body":{"classes/Repository.html":{}}}],["use",{"_index":579,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["useful",{"_index":660,"title":{},"body":{"contributing.html":{}}}],["userapplications",{"_index":233,"title":{},"body":{"injectables/EntityManager.html":{}}}],["users",{"_index":536,"title":{},"body":{"contributing.html":{}}}],["using",{"_index":524,"title":{},"body":{"contributing.html":{}}}],["usually",{"_index":595,"title":{},"body":{"contributing.html":{}}}],["uuid",{"_index":157,"title":{},"body":{"injectables/EntityManager.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":156,"title":{},"body":{"injectables/EntityManager.html":{}}}],["v4",{"_index":155,"title":{},"body":{"injectables/EntityManager.html":{}}}],["value",{"_index":37,"title":{},"body":{"injectables/ACL.html":{},"injectables/EntityManager.html":{},"classes/Repository.html":{},"miscellaneous/variables.html":{}}}],["valued",{"_index":382,"title":{},"body":{"contributing.html":{}}}],["variable",{"_index":700,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":891,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":526,"title":{},"body":{"contributing.html":{}}}],["versions",{"_index":480,"title":{},"body":{"contributing.html":{}}}],["very",{"_index":418,"title":{},"body":{"contributing.html":{}}}],["viewer",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["void",{"_index":31,"title":{},"body":{"injectables/ACL.html":{}}}],["vulnerabilities",{"_index":573,"title":{},"body":{"contributing.html":{}}}],["want",{"_index":433,"title":{},"body":{"contributing.html":{}}}],["warranties",{"_index":864,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":861,"title":{},"body":{"license.html":{}}}],["way",{"_index":612,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ways",{"_index":387,"title":{},"body":{"contributing.html":{}}}],["web",{"_index":799,"title":{},"body":{"index.html":{}}}],["website",{"_index":796,"title":{},"body":{"index.html":{}}}],["well",{"_index":622,"title":{},"body":{"contributing.html":{}}}],["whether",{"_index":585,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["windows",{"_index":553,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["without",{"_index":840,"title":{},"body":{"license.html":{}}}],["work",{"_index":679,"title":{},"body":{"contributing.html":{}}}],["write",{"_index":466,"title":{},"body":{"contributing.html":{}}}],["writing",{"_index":667,"title":{},"body":{"contributing.html":{}}}],["wsl",{"_index":815,"title":{},"body":{"index.html":{}}}],["x86",{"_index":556,"title":{},"body":{"contributing.html":{}}}],["yes",{"_index":288,"title":{},"body":{"classes/Repository.html":{}}}],["you're",{"_index":477,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["zone.js",{"_index":779,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/ACL.html":{"url":"injectables/ACL.html","title":"injectable - ACL","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ACL\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/persistence/src/lib/services/acl.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                collection\n                            \n                            \n                                    Private\n                                isInitialized\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasPermission\n                            \n                            \n                                initialize\n                            \n                            \n                                requestPermissions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasPermission\n                        \n                    \n                \n            \n            \n                \nhasPermission(permission: literal type)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/acl.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    permission\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initialize\n                        \n                    \n                \n            \n            \n                \ninitialize(collection: ApplicationPermissionsCollection)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/acl.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n                                    \n                                            ApplicationPermissionsCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        requestPermissions\n                        \n                    \n                \n            \n            \n                \nrequestPermissions(permissions: Permission[])\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/acl.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    permissions\n                                    \n                                            Permission[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationPermissionsCollection\n\n                    \n                \n                    \n                        \n                                Defined in libs/persistence/src/lib/services/acl.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isInitialized\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/persistence/src/lib/services/acl.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n// eslint-disable-next-line @nrwl/nx/enforce-module-boundaries\nimport { ApplicationPermissionsCollection } from '@central-factory/permissions/collections/application-permissions.collection';\n// eslint-disable-next-line @nrwl/nx/enforce-module-boundaries\nimport {\n  Permission,\n  PermissionKind,\n  PermissionMode,\n} from '@central-factory/permissions/models/permission';\nimport { defer, from, map, Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ACL {\n  private collection?: ApplicationPermissionsCollection;\n\n  private isInitialized = false;\n\n  initialize(collection: ApplicationPermissionsCollection) {\n    if (this.isInitialized) {\n      return;\n    }\n\n    this.collection = collection;\n    this.isInitialized = true;\n  }\n\n  requestPermissions(permissions: Permission[]): Observable {\n    return defer(() => {\n      if (!this.isInitialized || !this.collection) {\n        return throwError(\n          () => new Error('PermissionsService not initialized')\n        );\n      }\n\n      return from(this.collection.bulkInsert(permissions)).pipe(\n        map(({ success }) => !!success)\n      );\n    });\n  }\n\n  hasPermission(permission: {\n    appId: string;\n    kind: PermissionKind;\n    mode: PermissionMode;\n    target: string;\n  }): Observable {\n    return defer(() => {\n      if (!this.isInitialized || !this.collection) {\n        return throwError(\n          () => new Error('PermissionsService not initialized')\n        );\n      }\n\n      const query = this.collection.findOne({\n        selector: {\n          id: `${permission.appId}:${permission.kind}:${permission.mode}:${permission.target}`,\n        },\n      });\n\n      return from(query.exec()).pipe(map((doc) => !!doc));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EntityManager.html":{"url":"injectables/EntityManager.html","title":"injectable - EntityManager","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EntityManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/persistence/src/lib/services/entity-manager.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _dbInstance\n                            \n                            \n                                    Public\n                                initialize$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                addBaseCollections\n                            \n                            \n                                    Private\n                                addInitialData\n                            \n                            \n                                    Private\n                                createDatabase\n                            \n                            \n                                    Public\n                                getRepository\n                            \n                            \n                                    Public\n                                isDatabaseCreated\n                            \n                            \n                                    Public\n                                setupDatabase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(acl: ACL, baseCollections: literal type[], initialData: literal type[])\n                    \n                \n                        \n                            \n                                Defined in libs/persistence/src/lib/services/entity-manager.ts:71\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        acl\n                                                  \n                                                        \n                                                                        ACL\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseCollections\n                                                  \n                                                        \n                                                                    literal type[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        initialData\n                                                  \n                                                        \n                                                                    literal type[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        addBaseCollections\n                        \n                    \n                \n            \n            \n                \n                    \n                    addBaseCollections(db: RxDatabase)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n                                    \n                                            RxDatabase\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        addInitialData\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInitialData(db: RxDatabase)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n                                    \n                                            RxDatabase\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createDatabase\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDatabase(name: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getRepository\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRepository(collectionName, appId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:102\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        RxDocumentType\n                        OrmMethods\n                        StaticMethods\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collectionName\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    appId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isDatabaseCreated\n                        \n                    \n                \n            \n            \n                \n                    \n                    isDatabaseCreated()\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setupDatabase\n                        \n                    \n                \n            \n            \n                \n                    \n                    setupDatabase(name: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/entity-manager.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _dbInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RxDatabase\n\n                    \n                \n                    \n                        \n                                Defined in libs/persistence/src/lib/services/entity-manager.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initialize$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ReplaySubject(0)\n                    \n                \n                    \n                        \n                                Defined in libs/persistence/src/lib/services/entity-manager.ts:69\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport * as PouchdbAdapterIdb from 'pouchdb-adapter-idb';\nimport { RxDBAttachmentsPlugin } from 'rxdb/plugins/attachments';\nimport {\n  addRxPlugin,\n  createRxDatabase,\n  RxCollection,\n  RxCollectionCreator,\n  RxDatabase,\n} from 'rxdb/plugins/core';\nimport { RxDBDevModePlugin } from 'rxdb/plugins/dev-mode';\nimport { RxDBEncryptionPlugin } from 'rxdb/plugins/encryption';\nimport { addPouchPlugin, getRxStoragePouch } from 'rxdb/plugins/pouchdb';\nimport { RxDBQueryBuilderPlugin } from 'rxdb/plugins/query-builder';\nimport { RxDBUpdatePlugin } from 'rxdb/plugins/update';\nimport { RxDBValidatePlugin } from 'rxdb/plugins/validate';\nimport {\n  defer,\n  forkJoin,\n  from,\n  map,\n  Observable,\n  of,\n  ReplaySubject,\n  switchMap,\n  tap,\n  throwError,\n} from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ACL } from './acl';\nimport { Repository } from './repository';\n\naddPouchPlugin(PouchdbAdapterIdb);\naddRxPlugin(RxDBDevModePlugin);\naddRxPlugin(RxDBValidatePlugin);\naddRxPlugin(RxDBEncryptionPlugin);\naddRxPlugin(RxDBQueryBuilderPlugin);\naddRxPlugin(RxDBUpdatePlugin);\naddRxPlugin(RxDBAttachmentsPlugin);\n\nexport const ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN = new InjectionToken('ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN');\n\nexport const ENTITY_MANAGER_INITIAL_DATA_TOKEN = new InjectionToken('ENTITY_MANAGER_INITIAL_DATA_TOKEN');\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EntityManager {\n  public initialize$ = new ReplaySubject(0);\n\n  private _dbInstance?: RxDatabase;\n\n  constructor(\n    private readonly acl: ACL,\n    @Inject(ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN)\n    private readonly baseCollections: {\n      name: string;\n      creator: RxCollectionCreator;\n    }[],\n    @Inject(ENTITY_MANAGER_INITIAL_DATA_TOKEN)\n    private readonly initialData: {\n      name: string;\n      data: any[];\n      upsert?: boolean;\n    }[]\n  ) {}\n\n  public setupDatabase(name: string, password: string): Observable {\n    return this.createDatabase(name, password).pipe(\n      switchMap((db) => this.addBaseCollections(db)),\n      tap((db) => this.acl.initialize(db.applicationpermissions)),\n      switchMap((db) => this.addInitialData(db)),\n      tap(() => this.initialize$.next()),\n      map(() => undefined)\n    );\n  }\n\n  public isDatabaseCreated() {\n    return this._dbInstance !== undefined;\n  }\n\n  public getRepository(\n    collectionName: keyof DatabaseCollections,\n    appId: string\n  ): Observable> {\n    if (!this._dbInstance) {\n      return throwError(() => new Error('Database not initialized'));\n    }\n\n    const collection = this._dbInstance.collections[\n      collectionName\n    ] as unknown as RxCollection;\n\n    if (!collection) {\n      return throwError(() => new Error('Collection not initialized'));\n    }\n\n    const repository = new Repository(appId, collection, this.acl);\n\n    return of(repository);\n  }\n\n  private createDatabase(\n    name: string,\n    password: string\n  ): Observable> {\n    return defer(() =>\n      from(\n        createRxDatabase>({\n          name,\n          password,\n          storage: getRxStoragePouch('idb'),\n        })\n      ).pipe(tap((db) => (this._dbInstance = db)))\n    );\n  }\n\n  private addBaseCollections(\n    db: RxDatabase\n  ): Observable> {\n    const baseCollections: {\n      [key: string]: RxCollectionCreator;\n    } = this.baseCollections.reduce(\n      (result, current) =>\n        Object.assign(result, { [current.name]: current.creator }),\n      {}\n    );\n\n    return defer(() =>\n      from(\n        db.addCollections(baseCollections) as unknown as Promise\n        >\n      ).pipe(\n        tap((db) => {\n          Object.values(db).forEach((collection) => {\n            collection.preInsert((data: any) => {\n              const now = new Date().toISOString();\n              data.id = data.id || uuidv4();\n              data.createdAt = data.createdAt || now;\n              data.updatedAt = data.updatedAt || now;\n            }, false);\n            collection.preSave((data: any, document: any) => {\n              const now = new Date().toISOString();\n              data.createdAt = document.createdAt || now;\n              data.updatedAt = now;\n            }, false);\n          });\n        })\n      )\n    );\n  }\n\n  private addInitialData(db: RxDatabase): Observable {\n    return forkJoin(\n      this.initialData.map((data) => {\n        const collection = db[data.name];\n        const upsert = 'upsert' in data ? data.upsert : true;\n\n        return forkJoin(\n          data.data.map((doc) => {\n            const shouldInsert$ = upsert\n              ? of(true)\n              : from(\n                  collection.findOne({ selector: { id: doc.id } }).exec()\n                ).pipe(map((result) => !result));\n\n            return shouldInsert$.pipe(\n              switchMap((shouldInsert) => {\n                if (!shouldInsert) {\n                  return of(undefined);\n                }\n\n                return from(collection.upsert(doc)).pipe(\n                  switchMap(() => {\n                    if (data.name !== 'userapplications') {\n                      return of(undefined);\n                    }\n\n                    const permissions = (\n                      doc.additionalProperties?.permissions || []\n                    ).map((permission: any) => ({\n                      ...permission,\n                      appId: doc.id,\n                      id: `${doc.id}:${permission.kind}:${permission.mode}:${permission.target}`,\n                    }));\n\n                    if (!permissions.length) {\n                      return of(undefined);\n                    }\n\n                    return forkJoin(\n                      permissions.map((permission: any) =>\n                        db.applicationpermissions.upsert(permission)\n                      )\n                    );\n                  })\n                );\n              })\n            );\n          })\n        );\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsDatabaseCreatedGuard.html":{"url":"guards/IsDatabaseCreatedGuard.html","title":"guard - IsDatabaseCreatedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsDatabaseCreatedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                libs/persistence/src/lib/guards/is-database-created.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(entityManager: EntityManager, router: Router, failureRedirectTo: string)\n                    \n                \n                        \n                            \n                                Defined in libs/persistence/src/lib/guards/is-database-created.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                        EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        failureRedirectTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate()\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/guards/is-database-created.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { EntityManager } from '../services/entity-manager';\n\nexport const ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN =\n  new InjectionToken(\n    'ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN',\n    {\n      providedIn: 'root',\n      factory: () => '/login',\n    }\n  );\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsDatabaseCreatedGuard implements CanActivate {\n  constructor(\n    private entityManager: EntityManager,\n    private router: Router,\n    @Inject(ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN)\n    private failureRedirectTo: string\n  ) {}\n\n  public canActivate(): boolean {\n    const isDatabaseCreated = this.entityManager.isDatabaseCreated();\n\n    if (!isDatabaseCreated) {\n      this.router.navigate([this.failureRedirectTo]);\n    }\n\n    return isDatabaseCreated;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsNotDatabaseCreatedGuard.html":{"url":"guards/IsNotDatabaseCreatedGuard.html","title":"guard - IsNotDatabaseCreatedGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsNotDatabaseCreatedGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                libs/persistence/src/lib/guards/is-not-database-created.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(entityManager: EntityManager, router: Router, failureRedirectTo: string)\n                    \n                \n                        \n                            \n                                Defined in libs/persistence/src/lib/guards/is-not-database-created.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entityManager\n                                                  \n                                                        \n                                                                        EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        failureRedirectTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate()\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/guards/is-not-database-created.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { EntityManager } from '../services/entity-manager';\n\nexport const ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN =\n  new InjectionToken(\n    'ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN',\n    {\n      providedIn: 'root',\n      factory: () => '/',\n    }\n  );\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsNotDatabaseCreatedGuard implements CanActivate {\n  constructor(\n    private entityManager: EntityManager,\n    private router: Router,\n    @Inject(ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN)\n    private failureRedirectTo: string\n  ) {}\n\n  public canActivate(): boolean {\n    const isDatabaseCreated = this.entityManager.isDatabaseCreated();\n\n    if (isDatabaseCreated) {\n      this.router.navigate([this.failureRedirectTo]);\n    }\n\n    return !isDatabaseCreated;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Repository.html":{"url":"classes/Repository.html","title":"class - Repository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Repository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/persistence/src/lib/services/repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                docToJSON\n                            \n                            \n                                find\n                            \n                            \n                                findOne\n                            \n                            \n                                getAllAttachments\n                            \n                            \n                                getAttachment\n                            \n                            \n                                insert\n                            \n                            \n                                observe\n                            \n                            \n                                observeAttachments\n                            \n                            \n                                observeOne\n                            \n                            \n                                putAttachment\n                            \n                            \n                                remove\n                            \n                            \n                                removeAttachment\n                            \n                            \n                                    Private\n                                requestPermission\n                            \n                            \n                                update\n                            \n                            \n                                upsert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appId: string, collection: RxCollection, acl: ACL)\n                    \n                \n                        \n                            \n                                Defined in libs/persistence/src/lib/services/repository.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        collection\n                                                  \n                                                        \n                                                                    RxCollection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        acl\n                                                  \n                                                        \n                                                                        ACL\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        docToJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    docToJSON(doc: RxDocument)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:303\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                            RxDocument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     RxDocumentType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllAttachments\n                        \n                    \n                \n            \n            \n                \ngetAllAttachments(docId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAttachment\n                        \n                    \n                \n            \n            \n                \ngetAttachment(docId: string, attachmentId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attachmentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert(doc: RxDocumentType)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                            RxDocumentType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observe\n                        \n                    \n                \n            \n            \n                \nobserve(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observeAttachments\n                        \n                    \n                \n            \n            \n                \nobserveAttachments(docId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:243\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        observeOne\n                        \n                    \n                \n            \n            \n                \nobserveOne(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putAttachment\n                        \n                    \n                \n            \n            \n                \nputAttachment(docId: string, attachment: Attachment, skipIfSame: boolean)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    attachment\n                                    \n                                                Attachment\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    skipIfSame\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(query?: Query)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeAttachment\n                        \n                    \n                \n            \n            \n                \nremoveAttachment(docId: string, attachmentId: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    docId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attachmentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        requestPermission\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestPermission(mode: PermissionMode)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:279\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mode\n                                    \n                                            PermissionMode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(where?: Query, update?: Update)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                                Query\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    update\n                                    \n                                                Update\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upsert\n                        \n                    \n                \n            \n            \n                \nupsert(doc: RxDocumentType)\n                \n            \n\n\n            \n                \n                    Defined in libs/persistence/src/lib/services/repository.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    doc\n                                    \n                                            RxDocumentType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  PermissionKind,\n  PermissionMode,\n} from '@central-factory/permissions/models/permission';\nimport {\n  BlobBuffer,\n  MangoQuery,\n  RxCollection,\n  RxDocument,\n} from 'rxdb/dist/types/types';\nimport {\n  forkJoin,\n  from,\n  map,\n  Observable,\n  of,\n  switchMap,\n  throwError,\n} from 'rxjs';\nimport { ACL } from './acl';\n\nexport type Query = MangoQuery | undefined;\nexport type Update = any;\n\nexport type Attachment = {\n  id: string;\n  data: BlobBuffer;\n  type: string;\n};\n\nexport class Repository {\n  constructor(\n    private readonly appId: string,\n    private readonly collection: RxCollection,\n    private readonly acl: ACL\n  ) {}\n\n  insert(doc: RxDocumentType): Observable {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() => this.collection.insert(doc)),\n      map((doc) => this.docToJSON(doc))\n    );\n  }\n\n  upsert(doc: RxDocumentType): Observable {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() => this.collection.upsert(doc)),\n      map((doc) => this.docToJSON(doc))\n    );\n  }\n\n  findOne(query?: Query): Observable {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() => this.collection.findOne(query).exec()),\n      map((doc) => (doc ? this.docToJSON(doc) : null))\n    );\n  }\n\n  find(query?: Query): Observable {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() => this.collection.find(query).exec()),\n      map((docs) => docs.map((doc) => this.docToJSON(doc)))\n    );\n  }\n\n  observe(query?: Query): Observable {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() => this.collection.find(query).$),\n      map((docs) => docs.map((doc) => this.docToJSON(doc)))\n    );\n  }\n\n  observeOne(query?: Query): Observable {\n    return this.observe(query).pipe(\n      map((docs) => (docs.length > 0 ? docs[0] : null))\n    );\n  }\n\n  update(\n    where?: Query,\n    update?: Update\n  ): Observable {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() => this.collection.find(where).update(update)),\n      map((docs) => docs.map((doc) => this.docToJSON(doc)))\n    );\n  }\n\n  remove(query?: Query): Observable {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() => this.collection.find(query).remove()),\n      map((docs) => docs.map((doc) => this.docToJSON(doc)))\n    );\n  }\n\n  putAttachment(\n    docId: string,\n    attachment: Attachment,\n    skipIfSame: boolean = false\n  ): Observable {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        return doc.putAttachment(attachment, skipIfSame);\n      }),\n      map((attachment) => attachment.id)\n    );\n  }\n\n  getAttachment(docId: string, attachmentId: string): Observable {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        return of(doc.getAttachment(attachmentId));\n      }),\n      switchMap((attachment) => {\n        if (!attachment) {\n          return throwError(\n            () => new Error('No attachment found for id ' + attachmentId)\n          );\n        }\n\n        return from(attachment.getData()).pipe(\n          map((data) => ({\n            id: attachment.id,\n            data,\n            type: attachment.type,\n          }))\n        );\n      })\n    );\n  }\n\n  getAllAttachments(docId: string): Observable {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        return of(doc.allAttachments());\n      }),\n      switchMap((attachments) => {\n        if (attachments.length \n            from(attachment.getData()).pipe(\n              map((data) => ({\n                id: attachment.id,\n                data,\n                type: attachment.type,\n              }))\n            )\n          )\n        );\n      })\n    );\n  }\n\n  removeAttachment(docId: string, attachmentId: string): Observable {\n    return this.requestPermission(PermissionMode.Write).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        const attachment = doc.getAttachment(attachmentId);\n\n        if (!attachment) {\n          return throwError(\n            () => new Error('No attachment found for id ' + attachmentId)\n          );\n        }\n\n        return attachment.remove();\n      })\n    );\n  }\n\n  observeAttachments(docId: string): Observable {\n    return this.requestPermission(PermissionMode.Read).pipe(\n      switchMap(() =>\n        this.collection\n          .findOne({\n            selector: {\n              id: docId,\n            },\n          })\n          .exec()\n      ),\n      switchMap((doc) => {\n        if (!doc) {\n          return throwError(\n            () => new Error('No document found for id ' + docId)\n          );\n        }\n\n        return doc.allAttachments$;\n      }),\n      switchMap((attachments) => {\n        return forkJoin(\n          attachments.map((attachment) =>\n            from(attachment.getData()).pipe(\n              map((data) => ({\n                id: attachment.id,\n                data,\n                type: attachment.type,\n              }))\n            )\n          )\n        );\n      })\n    );\n  }\n\n  private requestPermission(mode: PermissionMode): Observable {\n    return this.acl\n      .hasPermission({\n        appId: this.appId,\n        kind: PermissionKind.Collection,\n        mode,\n        target: this.collection.name,\n      })\n      .pipe(\n        switchMap((hasPermission) => {\n          if (!hasPermission) {\n            return throwError(\n              () =>\n                new Error(\n                  `No permission to perform action ${mode} on ${this.collection.name} with appId ${this.appId}`\n                )\n            );\n          }\n\n          return of(hasPermission);\n        })\n      );\n  }\n\n  private docToJSON(\n    doc: RxDocument\n  ): RxDocumentType {\n    const result = JSON.parse(JSON.stringify(doc));\n    result._attachments = (doc as any)._attachments;\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\n\nContributing to The Central Factory's Metaverse\nFirst off, thanks for taking the time to contribute! ❤️\nAll types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. 🎉\n\nAnd if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:\n\nStar the project\nTweet about it\nRefer this project in your project's readme\nMention the project at local meetups and tell your friends/colleagues\n\n\n\nTable of Contents\n\nCode of Conduct\nI Have a Question\nI Want To Contribute\nReporting Bugs\nSuggesting Enhancements\nYour First Code Contribution\nImproving The Documentation\n\n\nStyleguides\nCommit Messages\n\n\nJoin The Project Team\n\nCode of Conduct\nThis project and everyone participating in it is governed by the\nThe Central Factory's Metaverse Code of Conduct.\nBy participating, you are expected to uphold this code. Please report unacceptable behavior\nto <>.\nI Have a Question\n\nIf you want to ask a question, we assume that you have read the available Documentation.\n\nBefore you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.\nIf you then still feel the need to ask a question and need clarification, we recommend the following:\n\nOpen an Issue.\nProvide as much context as you can about what you're running into.\nProvide project and platform versions (nodejs, npm, etc), depending on what seems relevant.\n\nWe will then take care of the issue as soon as possible.\n\n\nI Want To Contribute\n\nLegal Notice \nWhen contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.\n\nReporting Bugs\n\nBefore Submitting a Bug Report\nA good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.\n\nMake sure that you are using the latest version.\nDetermine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the documentation. If you are looking for support, you might want to check this section).\nTo see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker.\nAlso make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.\nCollect information about the bug:\nStack trace (Traceback)\nOS, Platform and Version (Windows, Linux, macOS, x86, ARM)\nVersion of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.\nPossibly your input and the output\nCan you reliably reproduce the issue? And can you also reproduce it with older versions?\n\n\n\n\nHow Do I Submit a Good Bug Report?\n\nYou must never report security related issues, vulnerabilities or bugs to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to <>.\n\n\n\nWe use GitHub issues to track bugs and errors. If you run into an issue with the project:\n\nOpen an Issue. (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)\nExplain the behavior you would expect and the actual behavior.\nPlease provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.\nProvide the information you collected in the previous section.\n\nOnce it's filed:\n\nThe project team will label the issue accordingly.\nA team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as needs-repro. Bugs with the needs-repro tag will not be addressed until they are reproduced.\nIf the team is able to reproduce the issue, it will be marked needs-fix, as well as possibly other tags (such as critical), and the issue will be left to be implemented by someone.\n\n\n\n\nSuggesting Enhancements\nThis section guides you through submitting an enhancement suggestion for The Central Factory's Metaverse, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.\n\nBefore Submitting an Enhancement\n\nMake sure that you are using the latest version.\nRead the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration.\nPerform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.\nFind out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.\n\n\nHow Do I Submit a Good Enhancement Suggestion?\nEnhancement suggestions are tracked as GitHub issues.\n\nUse a clear and descriptive title for the issue to identify the suggestion.\nProvide a step-by-step description of the suggested enhancement in as many details as possible.\nDescribe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you.\nYou may want to include screenshots and animated GIFs which help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. \nExplain why this enhancement would be useful to most The Central Factory's Metaverse users. You may also want to point out the other projects that solved it better and which could serve as inspiration.\n\n\n\nYour First Code Contribution\n\n\nImproving The Documentation\n\n\nStyleguides\nCommit Messages\n\n\nJoin The Project Team\n\n\n\nAttribution\nThis guide is based on the contributing-gen. Make your own!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                libs/persistence/src/lib/guards/is-database-created.guard.ts\n            \n            guard\n            IsDatabaseCreatedGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/guards/is-database-created.guard.ts\n            \n            variable\n            ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/guards/is-not-database-created.guard.ts\n            \n            guard\n            IsNotDatabaseCreatedGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/guards/is-not-database-created.guard.ts\n            \n            variable\n            ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/acl.ts\n            \n            injectable\n            ACL\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/entity-manager.ts\n            \n            injectable\n            EntityManager\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/entity-manager.ts\n            \n            variable\n            ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/entity-manager.ts\n            \n            variable\n            ENTITY_MANAGER_INITIAL_DATA_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/persistence/src/lib/services/repository.ts\n            \n            class\n            Repository\n            \n                0 %\n                (0/17)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular-architects/module-federation : ^14.0.2\n        \n            @angular-extensions/elements : ^13.0.0\n        \n            @angular/animations : ~13.1.0\n        \n            @angular/cdk : ~13.1.0\n        \n            @angular/common : ~13.1.0\n        \n            @angular/compiler : ~13.1.0\n        \n            @angular/core : ~13.1.0\n        \n            @angular/forms : ~13.1.0\n        \n            @angular/platform-browser : ~13.1.0\n        \n            @angular/platform-browser-dynamic : ~13.1.0\n        \n            @angular/router : ~13.1.0\n        \n            @asymmetrik/ngx-leaflet : ^8.1.0\n        \n            @cliqz/adblocker-electron : ^1.23.2\n        \n            @docusaurus/core : ^2.0.0-alpha.70\n        \n            @docusaurus/preset-classic : ^2.0.0-alpha.70\n        \n            @google/model-viewer : ^1.10.1\n        \n            @mdi/svg : ^6.5.95\n        \n            @mdx-js/react : ^1.6.21\n        \n            @nestjs/common : ^8.2.6\n        \n            @nestjs/core : ^8.2.6\n        \n            @nestjs/platform-express : ^8.2.6\n        \n            @ng-select/ng-select : ^8.1.1\n        \n            @ngxd/core : ^13.0.0\n        \n            avataaars : ^1.2.1\n        \n            clsx : ^1.1.1\n        \n            electron-store : ^8.0.1\n        \n            hotkeys-js : ^3.8.7\n        \n            leaflet : ^1.7.1\n        \n            phaser : ^3.55.2\n        \n            pouchdb-adapter-idb : ^7.2.2\n        \n            react : ^16.8.4\n        \n            react-dom : ^16.14.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxdb : ^11.3.0\n        \n            rxjs : ~7.5.1\n        \n            simple-icons : ^6.9.0\n        \n            tslib : ^2.0.0\n        \n            uuid : ^8.3.2\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nThe Central Factory's Metaverse\nTypeScript Open Source packages for the Metaverse.\nThis code includes The Central Factory's Metaverse Core packages and Community Editions.\nProperty of The Central Factory Foundation. MIT Licensed software\nDevelopment\nServe apps\n# run the portal app\nnx serve portal\n# run the codex website\nnx serve codexBuilding themes\nnx run web-components:build-themesRunning storybook\nnx run :storybook\n# Example:\nnx run assets:storybookRunning linters & tests\nnx run-many --target=lint --allTroubleshooting\nYou need to make sure that /mnt/d/Workspace/metaverse/node_modules/electron/dist/chrome-sandbox is owned by root and has mode 4755.\nThis is probably because you're running the app from a Windows Subsystem for Linux (WSL) container. The easiest way to fix this is to install the Electron npm package for Windows:\n# Uninstall the Electron package for Linux\nnpm uninstall electron\n# Change npm config platform\nexport npm_config_platform=win32\n# Install the Electron package for Windows\nnpm install electron\n# Unset the environment variable\nunset npm_config_platform\n# Remove the changes in the package and package-lock files\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Central Factory\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Attachment   (libs/.../repository.ts)\n                        \n                        \n                            Query   (libs/.../repository.ts)\n                        \n                        \n                            Update   (libs/.../repository.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/persistence/src/lib/services/repository.ts\n    \n    \n        \n            \n                \n                    \n                    Attachment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Query\n                \n            \n            \n                \n                            MangoQuery | undefined\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Update\n                \n            \n            \n                \n                            any\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN   (libs/.../entity-manager.ts)\n                        \n                        \n                            ENTITY_MANAGER_INITIAL_DATA_TOKEN   (libs/.../entity-manager.ts)\n                        \n                        \n                            ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN   (libs/.../is-database-created.guard.ts)\n                        \n                        \n                            ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN   (libs/.../is-not-database-created.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/persistence/src/lib/services/entity-manager.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('ENTITY_MANAGER_BASE_COLLECTIONS_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ENTITY_MANAGER_INITIAL_DATA_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('ENTITY_MANAGER_INITIAL_DATA_TOKEN')\n                    \n                \n\n\n        \n    \n\n    libs/persistence/src/lib/guards/is-database-created.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n    'ON_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN',\n    {\n      providedIn: 'root',\n      factory: () => '/login',\n    }\n  )\n                    \n                \n\n\n        \n    \n\n    libs/persistence/src/lib/guards/is-not-database-created.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n    'ON_NOT_DATABASE_CREATED_GUARD_FAILURE_REDIRECT_TOKEN',\n    {\n      providedIn: 'root',\n      factory: () => '/',\n    }\n  )\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
